;*******************************************************************************************;*;*   raylib [textures] example - Bunnymark;*;*   This example has been created using raylib 1.6 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Copyright (c) 2014-2019 Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                  ; First we need to includeXIncludeFile "raylib.pbi"               ; the raylib-purebasic importEnableExplicit                          ; All variables have to be defined before useUseModule ray                           ; Import the module#MAX_BUNNIES = 50000                    ; 50K bunnies limit; This is the maximum amount of elements (quads) per batch; NOTE: This value is defined in [rlgl] module and can be changed there#MAX_BATCH_ELEMENTS = 8192Structure Bunny    position.Vector2    speed.Vector2    color.lEndStructure; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [textures] example - bunnymark" )If Not IsWindowReady()                  ; After creating the window, we check    End                                 ; for errors at initialization.EndIf                                   ; In case of error at init we end the program.; Load bunny textureDefine texBunny.Texture2DLoadTextureRaylib(@texBunny, "resources/wabbit_alpha.png")Dim bunnies.Bunny( #MAX_BUNNIES )       ; Bunnies arrayDefine i, bunniesCount                  ; Bunnies counterSetTargetFPS(60)                        ; Set our game to run at 60 frames-per-second;>-------------------------------------------------------------------------------------; Main game loopRepeat    ; Update    ;>---------------------------------------------------------------------------------    If IsMouseButtonDown(#MOUSE_LEFT_BUTTON)        ; Create more bunnies        For i = 0 To 99            If bunniesCount < #MAX_BUNNIES                GetMousePosition( @bunnies(bunniesCount)\position )                bunnies(bunniesCount)\speed\x  = GetRandomValue(-250, 250) / 60.0                bunnies(bunniesCount)\speed\y  = GetRandomValue(-250, 250) / 60.0                bunnies(bunniesCount)\color    = RGBA( GetRandomValue( 50, 240),                                                       GetRandomValue( 80, 240),                                                       GetRandomValue(100, 240),                                                       255 )                bunniesCount + 1            EndIf        Next    EndIf    ; Update bunnies    For i = 0 To bunniesCount - 1        bunnies(i)\position\x + bunnies(i)\speed\x        bunnies(i)\position\y + bunnies(i)\speed\y        If bunnies(i)\position\x + texBunny\width / 2 > GetScreenWidth() Or           bunnies(i)\position\x + texBunny\width / 2 < 0            bunnies(i)\speed\x * -1        EndIf        If bunnies(i)\position\y + texBunny\height / 2 > GetScreenHeight() Or           bunnies(i)\position\y + texBunny\height / 2 - 40 < 0            bunnies(i)\speed\y * -1        EndIf    Next    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    BeginDrawing()            ClearBackground(#COLOR_RAYWHITE)        For i = 0 To bunniesCount - 1            ; NOTE: When internal batch buffer limit is reached (MAX_BATCH_ELEMENTS),            ; a draw call is launched and buffer starts being filled again;            ; before issuing a draw call, updated vertex data from internal CPU buffer is send to GPU...            ; Process of sending data is costly and it could happen that GPU data has not been completely            ; processed for drawing while new data is tried to be sent (updating current in-use buffers)            ; it could generates a stall and consequently a frame drop, limiting the number of drawn bunnies            DrawTexture(@texBunny, bunnies(i)\position\x,                                   bunnies(i)\position\y,                                   bunnies(i)\color)        Next        DrawRectangle(0, 0, #SCREEN_WIDTH, 40, #COLOR_BLACK)        DrawTextRaylib("bunnies: "+bunniesCount, 120, 10, 20, #COLOR_GREEN)        DrawTextRaylib("batched draw calls: "+ Str(1 + bunniesCount/#MAX_BATCH_ELEMENTS), 320, 10, 20, #COLOR_MAROON)        DrawFPS(10, 10)    EndDrawing()    ;>---------------------------------------------------------------------------------        If IsKeyPressed(#KEY_F1)        TakeScreenshot("screenshots/textures_bunnymark.png")    EndIf    Until WindowShouldClose()               ; Detect window close button or ESC key; De-Initialization;>-------------------------------------------------------------------------------------UnloadTexture(@texBunny)                ; Unload bunny textureCloseWindowRaylib()                     ; Close window and OpenGL context;>-------------------------------------------------------------------------------------