;*******************************************************************************************;*;*   raylib [core] example - 2d camera;*;*   This example has been created using raylib 1.5 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Copyright (c) 2016 Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                      ; First we need to includeXIncludeFile "raylib.pbi"                   ; the raylib-purebasic importEnableExplicit; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450#MAX_BUILDINGS = 100ray::InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [core] example - 2d camera" )If Not ray::IsWindowReady()                 ; After creating the window, we check    End                                     ; for errors at initialization.EndIf                                       ; In case of error at init we end the program.ray::SetTargetFPS(60)                       ; Set our game to run at 60 frames-per-secondDefine player.ray::Rectangle : ray::InitRectangle(@player, 400, 280, 40, 40)Dim buildings.ray::Rectangle(#MAX_BUILDINGS)Dim buildColors(#MAX_BUILDINGS)Define i, spacingFor i = 0 To #MAX_BUILDINGS - 1    buildings(i)\width  = ray::GetRandomValue(50, 200)    buildings(i)\height = ray::GetRandomValue(100, 800)    buildings(i)\y = #SCREEN_HEIGHT - 130 - buildings(i)\height    buildings(i)\x = -6000 + spacing    spacing + buildings(i)\width    buildColors(i) = RGBA( ray::GetRandomValue(200, 240), ray::GetRandomValue(200, 240), ray::GetRandomValue(200, 250), 255 )NextDefine camera.ray::Camera2Dray::InitVector2( @camera\target, player\x + 20, player\y + 20 )ray::InitVector2( @camera\offset, #SCREEN_WIDTH/2, #SCREEN_HEIGHT/2 )camera\rotation = 0.0camera\zoom = 1.0;>-------------------------------------------------------------------------------------; Main game loopWhile Not ray::WindowShouldClose()          ; Detect window close button or ESC key    ; Update    ;>---------------------------------------------------------------------------------    ; Player movement    If ray::IsKeyDown(ray::#KEY_RIGHT)        player\x + 2    ElseIf ray::IsKeyDown(ray::#KEY_LEFT)        player\x - 2    EndIf    ; Camera target follows player    ray::InitVector2( @camera\target, player\x + 20, player\y + 20 )    ; Camera rotation controls    If ray::IsKeyDown(ray::#KEY_A)        camera\rotation - 1    ElseIf ray::IsKeyDown(ray::#KEY_S)        camera\rotation + 1    EndIf    ; Limit camera rotation to 80 degrees (-40 to 40)    If camera\rotation > 40        camera\rotation = 40    ElseIf camera\rotation < -40        camera\rotation = -40    EndIf    ; Camera zoom controls    camera\zoom + (ray::GetMouseWheelMove()*0.05)    If camera\zoom > 3.0        camera\zoom = 3.0    ElseIf camera\zoom < 0.1        camera\zoom = 0.1    EndIf    ; Camera reset (zoom and rotation)    If ray::IsKeyPressed(ray::#KEY_R)        camera\zoom = 1.0        camera\rotation = 0.0    EndIf    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    ray::BeginDrawing()            ray::ClearBackground(ray::#COLOR_RAYWHITE)        ray::BeginMode2D(@camera)            ray::DrawRectangle(-6000, 320, 13000, 8000, ray::#COLOR_DARKGRAY)            For i = 0 To #MAX_BUILDINGS - 1                ray::DrawRectangleRec( @buildings(i), buildColors(i) )            Next            ray::DrawRectangleRec(@player, ray::#COLOR_RED)            ray::DrawLine(camera\target\x, -#SCREEN_HEIGHT*10, camera\target\x, #SCREEN_HEIGHT*10, ray::#COLOR_GREEN)            ray::DrawLine(-#SCREEN_WIDTH*10, camera\target\y, #SCREEN_WIDTH*10, camera\target\y, ray::#COLOR_GREEN)        ray::EndMode2D()        ray::DrawTextRaylib("SCREEN AREA", 640, 10, 20, ray::#COLOR_RED)        ray::DrawRectangle(0, 0, #SCREEN_WIDTH, 5, ray::#COLOR_RED)        ray::DrawRectangle(0, 5, 5, #SCREEN_HEIGHT - 10, ray::#COLOR_RED)        ray::DrawRectangle(#SCREEN_WIDTH - 5, 5, 5, #SCREEN_HEIGHT - 10, ray::#COLOR_RED)        ray::DrawRectangle(0, #SCREEN_HEIGHT - 5, #SCREEN_WIDTH, 5, ray::#COLOR_RED)        ray::DrawRectangle( 10, 10, 250, 113, ray::Fade(ray::#COLOR_SKYBLUE, 0.5) )        ray::DrawRectangleLines( 10, 10, 250, 113, ray::#COLOR_BLUE )        ray::DrawTextRaylib("Free 2d camera controls:", 20, 20, 10, ray::#COLOR_BLACK)        ray::DrawTextRaylib("- Right/Left to move Offset", 40, 40, 10, ray::#COLOR_DARKGRAY)        ray::DrawTextRaylib("- Mouse Wheel to Zoom in-out", 40, 60, 10, ray::#COLOR_DARKGRAY)        ray::DrawTextRaylib("- A / S to Rotate", 40, 80, 10, ray::#COLOR_DARKGRAY)        ray::DrawTextRaylib("- R to reset Zoom and Rotation", 40, 100, 10, ray::#COLOR_DARKGRAY)        ray::DrawFPS(#SCREEN_WIDTH/2 + 10,10)    ray::EndDrawing()    ;>---------------------------------------------------------------------------------        ; If we want to have a screenshot    If ray::IsKeyPressed(ray::#KEY_F1)        ray::TakeScreenshot("screenshots/core_2d_camera.png")    EndIfWend; De-Initialization;>-------------------------------------------------------------------------------------ray::CloseWindowRaylib()                ; Close window and OpenGL context;>-------------------------------------------------------------------------------------