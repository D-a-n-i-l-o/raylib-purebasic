;*******************************************************************************************;*;*   raylib [core] example - window scale letterbox (and virtual mouse);*;*   This example has been created using raylib 2.5 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Example contributed by Anata (@anatagawa) and reviewed by Ramon Santamaria (@raysan5);*;*   Copyright (c) 2019 Anata (@anatagawa) and Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                  ; First we need to includeXIncludeFile "raylib.pbi"               ; the raylib-purebasic importEnableExplicit                          ; All variables have to be defined before useUseModule ray                           ; Import the moduleProcedure.f fmaxf(a.f, b.f) : If a>b : ProcedureReturn a : Else : ProcedureReturn b : EndIf : EndProcedureProcedure.f fminf(a.f, b.f) : If a<b : ProcedureReturn a : Else : ProcedureReturn b : EndIf : EndProcedure; Clamp Vector2 value with min and max and return a new vector2; NOTE: Required for virtual mouse, to clamp inside virtual game sizeProcedure ClampValue(*out_result.Vector2, *in_value.Vector2, *in_min.Vector2, *in_max.Vector2)    If *out_result And *in_value And *in_min And *in_max        *out_result\x = *in_value\x        *out_result\y = *in_value\y        If *out_result\x > *in_max\x : *out_result\x = *in_max\x : EndIf        If *out_result\x < *in_min\x : *out_result\x = *in_min\x : Else : *out_result\x = *out_result\x : EndIf        If *out_result\y > *in_max\y : *out_result\y = *in_max\y : EndIf        If *out_result\y < *in_min\y : *out_result\y = *in_min\y : Else : *out_result\y = *out_result\y : EndIf    EndIfEndProcedure; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450; Enable config flags for resizable window and vertical synchroSetConfigFlags(#FLAG_WINDOW_RESIZABLE | #FLAG_VSYNC_HINT)InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [core] example - window scale letterbox" )If Not IsWindowReady()                  ; After creating the window, we check    End                                 ; for errors at initialization.EndIf                                   ; In case of error at init we end the program.SetWindowMinSize(320, 240)              ;#GAME_SCREEN_WIDTH  = 640#GAME_SCREEN_HEIGHT = 480; Render texture initialization, used to hold the rendering result so we can easily resize itDefine target.RenderTexture2DLoadRenderTexture(@target, #GAME_SCREEN_WIDTH, #GAME_SCREEN_HEIGHT)SetTextureFilter(@target\texture, #FILTER_BILINEAR) ; Texture scale filter to useDefine iDim colors.i(10)For i = 0 To 9    colors(i) = RGBA( GetRandomValue(100, 250),                      GetRandomValue(50, 150),                      GetRandomValue(10, 100),                      255 )NextDefine gameScreenVec.Vector2InitVector2(@gameScreenVec, #GAME_SCREEN_WIDTH, #GAME_SCREEN_HEIGHT)SetTargetFPS(60)                        ; Set our game to run at 60 frames-per-second;>-------------------------------------------------------------------------------------; Main game loopWhile Not WindowShouldClose()           ; Detect window close button or ESC key    ; Update    ;>---------------------------------------------------------------------------------    ; Compute required framebuffer scaling    Define scale.f = fminf( GetScreenWidth()  / #GAME_SCREEN_WIDTH,                            GetScreenHeight() / #GAME_SCREEN_HEIGHT )    If IsKeyPressed(#KEY_SPACE)        ; Recalculate random colors for the bars        For i = 0 To 9            colors(i) = RGBA( GetRandomValue(100, 250),                              GetRandomValue(50, 150),                              GetRandomValue(10, 100),                              255 )        Next    EndIf    ; Update virtual mouse (clamped mouse value behind game screen)    Define.Vector2 mouse, virtualMouse, emptyVec    GetMousePosition(@mouse)    virtualMouse\x = (mouse\x - (GetScreenWidth()  - (#GAME_SCREEN_WIDTH  * scale))*0.5)/scale    virtualMouse\y = (mouse\y - (GetScreenHeight() - (#GAME_SCREEN_HEIGHT * scale))*0.5)/scale    ClampValue(@virtualMouse, @virtualMouse, @emptyVec, @gameScreenVec)    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    BeginDrawing()            ClearBackground(#COLOR_BLACK)                ; Draw everything in the render texture, note this will not be rendered on screen, yet        BeginTextureMode(@target)            ClearBackground(#COLOR_RAYWHITE)    ; Clear render texture background color            For i = 0 To 9                DrawRectangle(0, (#GAME_SCREEN_HEIGHT/10)*i, #GAME_SCREEN_WIDTH, #GAME_SCREEN_HEIGHT/10, colors(i))            Next            DrawTextRaylib("If executed inside a window,"+Chr(10)+"you can resize the window,"+Chr(10)+"and see the screen scaling!", 10, 35, 20, #COLOR_WHITE)            DrawTextRaylib("Default Mouse: ["+Str(mouse\x)+" , "+Str(mouse\y)+"]", 350, 25, 20, #COLOR_GREEN)            DrawTextRaylib("Virtual Mouse: ["+Str(virtualMouse\x)+" , "+Str(virtualMouse\y)+"]", 350, 55, 20, #COLOR_YELLOW)            DrawFPS(10,10)        EndTextureMode()        ; Draw RenderTexture2D to window, properly scaled        Define.Rectangle rect1, rect2        InitRectangle(@rect1, 0.0, 0.0, target\texture\width, -target\texture\height)        InitRectangle(@rect2, (GetScreenWidth()  - (#GAME_SCREEN_WIDTH  * scale)) * 0.5,                              (GetScreenHeight() - (#GAME_SCREEN_HEIGHT * scale)) * 0.5,                              #GAME_SCREEN_WIDTH  * scale,                              #GAME_SCREEN_HEIGHT * scale)        DrawTexturePro( @target\texture, @rect1, @rect2, @emptyVec, 0.0, #COLOR_WHITE )    EndDrawing()    ;>---------------------------------------------------------------------------------        ; If we want to have a screenshot    If IsKeyPressed(#KEY_F1)        TakeScreenshot("screenshots/core_window_letterbox.png")    EndIfWend; De-Initialization;>-------------------------------------------------------------------------------------UnloadRenderTexture(@target)            ; Unload render textureCloseWindowRaylib()                     ; Close window and OpenGL context;>-------------------------------------------------------------------------------------