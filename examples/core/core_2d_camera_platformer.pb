;*******************************************************************************************;*;*   raylib [core] example - 2d camera platformer;*;*   This example has been created using raylib 2.5 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Example contributed by arvyy (@arvyy) and reviewed by Ramon Santamaria (@raysan5);*;*   Copyright (c) 2019 arvyy (@arvyy);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                      ; First we need to includeXIncludeFile "raylib.pbi"                   ; the raylib-purebasic importEnableExplicitProcedure.f fmaxf(a.f, b.f) : If a > b : ProcedureReturn a : EndIf : ProcedureReturn b : EndProcedureProcedure.f fminf(a.f, b.f) : If a < b : ProcedureReturn a : EndIf : ProcedureReturn b : EndProcedure#G               = 400#PLAYER_JUMP_SPD = 350.0#PLAYER_HOR_SPD  = 200.0Structure Player    position.ray::Vector2    speed.f    canJump.iEndStructureStructure EnvItem    rect.ray::Rectangle    blocking.i    color.iEndStructureDeclare UpdatePlayer(*player.Player, Array envItems.EnvItem(1), delta.f)Declare UpdateCameraCenter(*camera.ray::Camera2D, *player.Player, Array envItem.EnvItem(1), delta.f, width.i, height.i)Declare UpdateCameraCenterInsideMap(*camera.ray::Camera2D, *player.Player, Array envItem.EnvItem(1), delta.f, width.i, height.i)Declare UpdateCameraCenterSmoothFollow(*camera.ray::Camera2D, *player.Player, Array envItem.EnvItem(1), delta.f, width.i, height.i)Declare UpdateCameraEvenOutOnLanding(*camera.ray::Camera2D, *player.Player, Array envItem.EnvItem(1), delta.f, width.i, height.i)Declare UpdateCameraPlayerBoundsPush(*camera.ray::Camera2D, *player.Player, Array envItem.EnvItem(1), delta.f, width.i, height.i)Prototype CameraUpdater(*camera.ray::Camera2D, *player.Player, Array envItem.EnvItem(1), delta.f, width.i, height.i); Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450ray::InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [core] example - 2d camera platformer" )If Not ray::IsWindowReady()                 ; After creating the window, we check    End                                     ; for errors at initialization.EndIf                                       ; In case of error at init we end the program.ray::SetTargetFPS(60)                       ; Set our game to run at 60 frames-per-secondDefine player.Playerray::InitVector2( @player\position, 400, 280 )player\speed = 0.0player\canJump = #FalseDim envItems.EnvItem(5)envItems(0)\rect\x     = 0    : envItems(0)\rect\y      = 0envItems(0)\rect\width = 1000 : envItems(0)\rect\height = 400envItems(0)\blocking   = 0    : envItems(0)\color       = ray::#COLOR_LIGHTGRAYenvItems(1)\rect\x     = 0    : envItems(1)\rect\y      = 400envItems(1)\rect\width = 1000 : envItems(1)\rect\height = 200envItems(1)\blocking   = 1    : envItems(1)\color       = ray::#COLOR_GRAYenvItems(2)\rect\x     = 300  : envItems(2)\rect\y      = 200envItems(2)\rect\width = 400  : envItems(2)\rect\height = 10envItems(2)\blocking   = 1    : envItems(2)\color       = ray::#COLOR_GRAYenvItems(3)\rect\x     = 250  : envItems(3)\rect\y      = 300envItems(3)\rect\width = 100  : envItems(3)\rect\height = 10envItems(3)\blocking   = 1    : envItems(3)\color       = ray::#COLOR_GRAYenvItems(4)\rect\x     = 650  : envItems(4)\rect\y      = 300envItems(4)\rect\width = 100  : envItems(4)\rect\height = 10envItems(4)\blocking   = 1    : envItems(4)\color       = ray::#COLOR_GRAYDefine envItemsLength = ArraySize(envItems())*SizeOf(EnvItem)Define camera.ray::Camera2Dcamera\target = player\position;ray::InitVector2( @camera\target, player\position\x, player\position\y )ray::InitVector2( @camera\offset, #SCREEN_WIDTH/2, #SCREEN_HEIGHT/2 )camera\rotation = 0.0camera\zoom = 1.0Dim cameraUpdaters.i(5) ; Prototype CameraUpdatercameraUpdaters(0) = @UpdateCameraCenter()cameraUpdaters(1) = @UpdateCameraCenterInsideMap()cameraUpdaters(2) = @UpdateCameraCenterSmoothFollow()cameraUpdaters(3) = @UpdateCameraEvenOutOnLanding()cameraUpdaters(4) = @UpdateCameraPlayerBoundsPush()Define cameraOption = 0Dim cameraDescriptions.s(5)cameraDescriptions(0) = "Follow player center"cameraDescriptions(1) = "Follow player center, but clamp to map edges"cameraDescriptions(2) = "Follow player center; smoothed"cameraDescriptions(3) = "Follow player center horizontally; updateplayer center vertically after landing"cameraDescriptions(4) = "Player push camera on getting too close to screen edge";>-------------------------------------------------------------------------------------; Main game loopWhile Not ray::WindowShouldClose()          ; Detect window close button or ESC key    ; Update    ;>---------------------------------------------------------------------------------    Define deltaTime.f = ray::GetFrameTime()        UpdatePlayer(@player, envItems(), deltaTime)    camera\zoom + (ray::GetMouseWheelMove()*0.05)        If camera\zoom > 3.0        camera\zoom = 3.0    ElseIf camera\zoom < 0.25        camera\zoom = 0.25    EndIf        If ray::IsKeyPressed(ray::#KEY_R)        camera\zoom = 1.0        ray::InitVector2( @player\position, 400, 280 )    EndIf    If ray::IsKeyPressed(ray::#KEY_C)        cameraOption = (cameraOption + 1) % ArraySize( cameraUpdaters() )    EndIf    ; Call update camera function by its pointer    Define camUpdater.CameraUpdater = cameraUpdaters(cameraOption)    If camUpdater        camUpdater(@camera, @player, envItems(), deltaTime, #SCREEN_WIDTH, #SCREEN_HEIGHT)    EndIf    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    ray::BeginDrawing()            ray::ClearBackground(ray::#COLOR_LIGHTGRAY)        ray::BeginMode2D(@camera)                    Define i, arrSize = ArraySize( envItems() )            For i = 0 To arrSize                ray::DrawRectangleRec(@envItems(i)\rect, envItems(i)\color)                    Define playerRect.ray::Rectangle                ray::InitRectangle(@playerRect, player\position\x - 20, player\position\y - 40, 40, 40 )                ray::DrawRectangleRec(@playerRect, ray::#COLOR_RED)            Next        ray::EndMode2D()        ray::DrawTextRaylib("Controls:", 20, 20, 10, ray::#COLOR_BLACK)        ray::DrawTextRaylib("- Right/Left to move", 40, 40, 10, ray::#COLOR_DARKGRAY)        ray::DrawTextRaylib("- Space to jump", 40, 60, 10, ray::#COLOR_DARKGRAY)        ray::DrawTextRaylib("- Mouse Wheel to Zoom in-out, R to reset zoom", 40, 80, 10, ray::#COLOR_DARKGRAY)        ray::DrawTextRaylib("- C to change camera mode", 40, 100, 10, ray::#COLOR_DARKGRAY)        ray::DrawTextRaylib("Current camera mode:", 20, 120, 10, ray::#COLOR_BLACK)        ray::DrawTextRaylib(cameraDescriptions(cameraOption), 40, 140, 10, ray::#COLOR_DARKGRAY)                ray::DrawFPS(#SCREEN_WIDTH/2 + 10,10)    ray::EndDrawing()    ;>---------------------------------------------------------------------------------        ; If we want to have a screenshot    If ray::IsKeyPressed(ray::#KEY_F1)        ray::TakeScreenshot("screenshots/core_2d_camera_platformer.png")    EndIfWend; De-Initialization;>-------------------------------------------------------------------------------------ray::CloseWindowRaylib()                ; Close window and OpenGL context;>-------------------------------------------------------------------------------------;; Update Player;Procedure UpdatePlayer(*player.Player, Array envItems.EnvItem(1), delta.f)    If Not *player : ProcedureReturn : EndIf    If ray::IsKeyDown(ray::#KEY_LEFT)        *player\position\x - #PLAYER_HOR_SPD*delta    EndIf    If ray::IsKeyDown(ray::#KEY_RIGHT)        *player\position\x + #PLAYER_HOR_SPD*delta    EndIf    If ray::IsKeyDown(ray::#KEY_SPACE) And *player\canJump        *player\speed   = -#PLAYER_JUMP_SPD        *player\canJump = #False    EndIf    Define i, hitObstacle, arrSize = ArraySize( envItems() )    For i = 0 To arrSize        If envItems(i)\blocking And           envItems(i)\rect\x <= *player\position\x And           envItems(i)\rect\x + envItems(i)\rect\width >= *player\position\x And           envItems(i)\rect\y >= *player\position\y And           envItems(i)\rect\y < *player\position\y + *player\speed*delta            hitObstacle = 1            *player\speed = 0.0            *player\position\y = envItems(i)\rect\y        EndIf    Next    If Not hitObstacle        *player\position\y + *player\speed*delta        *player\speed   + #G*delta        *player\canJump = #False    Else        *player\canJump = #True    EndIfEndProcedure;; Camera updaters;Procedure UpdateCameraCenter(*camera.ray::Camera2D, *player.Player, Array envItem.EnvItem(1), delta.f, width.i, height.i)    If *camera And *player        *camera\offset\x = width/2        *camera\offset\y = height/2        *camera\target = *player\position    EndIfEndProcedureProcedure UpdateCameraCenterInsideMap(*camera.ray::Camera2D, *player.Player, Array envItem.EnvItem(1), delta.f, width.i, height.i)    If *camera And *player        *camera\target = *player\position        *camera\offset\x = width/2        *camera\offset\y = height/2                Define.f minX = 1000, minY = 1000, maxX = -1000, maxY = -1000        Define i, arrSize = ArraySize( envItem() )        For i = 0 To arrSize            minX = fminf(envItem(i)\rect\x, minX)            maxX = fmaxf(envItem(i)\rect\x + envItem(i)\rect\width, maxX)            minY = fminf(envItem(i)\rect\y, minY);            maxY = fmaxf(envItem(i)\rect\y + envItem(i)\rect\height, maxY)        Next                Define.ray::Vector2 min, max, vec        ray::InitVector2(@vec, maxX, maxY)        ray::GetWorldToScreen2D(@max, @vec, *camera)        ray::InitVector2(@vec, minX, minY)        ray::GetWorldToScreen2D(@min, @vec, *camera)        If max\x < width            *camera\offset\x = width - (max\x - width/2)        EndIf        If max\y < height            *camera\offset\y = height - (max\y - height/2)        EndIf        If min\x > 0            *camera\offset\x = width/2 - min\x        EndIf        If min\y > 0            *camera\offset\y = height/2 - min\y        EndIf    EndIfEndProcedureProcedure UpdateCameraCenterSmoothFollow(*camera.ray::Camera2D, *player.Player, Array envItem.EnvItem(1), delta.f, width.i, height.i)    If *camera And *player        Static.f minSpeed = 30, minEffectLength = 10, fractionSpeed = 0.8                *camera\offset\x = width/2        *camera\offset\y = height/2        Define.ray::Vector2 diff        ray::InitVector2(@diff, *player\position\x - *camera\target\x,                                *player\position\y - *camera\target\y)                Define length.f = Sqr((diff\x*diff\x) + (diff\y*diff\y))                If length > minEffectLength            Define speed.f = fmaxf(fractionSpeed*length, minSpeed)            *camera\target\x + diff\x * (speed*delta/length)            *camera\target\y + diff\y * (speed*delta/length)        EndIf    EndIfEndProcedureProcedure UpdateCameraEvenOutOnLanding(*camera.ray::Camera2D, *player.Player, Array envItem.EnvItem(1), delta.f, width.i, height.i)    If *camera And *player        Static evenOutSpeed.f = 700        Static eveningOut = #False        Static evenOutTarget.f                *camera\offset\x = width/2        *camera\offset\y = height/2        *camera\target\x = *player\position\x                If eveningOut            If evenOutTarget > *camera\target\y                *camera\target\y + evenOutSpeed*delta                                If *camera\target\y > evenOutTarget                     *camera\target\y = evenOutTarget                    eveningOut = 0                EndIf            Else                 *camera\target\y - evenOutSpeed*delta                                If *camera\target\y < evenOutTarget                     *camera\target\y = evenOutTarget                    eveningOut = 0                EndIf            EndIf        Else             If *player\canJump And *player\speed = 0.0 And (*player\position\y <> *camera\target\y)                eveningOut = 1                evenOutTarget = *player\position\y            EndIf        EndIf    EndIfEndProcedureProcedure UpdateCameraPlayerBoundsPush(*camera.ray::Camera2D, *player.Player, Array envItem.EnvItem(1), delta.f, width.i, height.i)    If *camera And *player        Static.ray::Vector2 bbox        ray::InitVector2( @bbox, 0.2, 0.2 )                Define.ray::Vector2 bboxWorldMin, bboxWorldMax, vec        ray::InitVector2( @vec, (1 - bbox\x)*0.5*width, (1 - bbox\y)*0.5*height )        ray::GetScreenToWorld2D(@bboxWorldMin, @vec, *camera)        ray::InitVector2( @vec, (1 + bbox\x)*0.5*width, (1 + bbox\y)*0.5*height )        ray::GetScreenToWorld2D(@bboxWorldMax, @vec, *camera)        ray::InitVector2( @*camera\offset, (1 - bbox\x)*0.5 * width, (1 - bbox\y)*0.5*height )            If *player\position\x < bboxWorldMin\x            *camera\target\x = *player\position\x        EndIf        If *player\position\y < bboxWorldMin\y            *camera\target\y = *player\position\y        EndIf        If *player\position\x > bboxWorldMax\x            *camera\target\x = bboxWorldMin\x + (*player\position\x - bboxWorldMax\x)        EndIf        If *player\position\y > bboxWorldMax\y            *camera\target\y = bboxWorldMin\y + (*player\position\y - bboxWorldMax\y)        EndIf    EndIfEndProcedure