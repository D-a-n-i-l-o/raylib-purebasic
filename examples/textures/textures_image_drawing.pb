;*******************************************************************************************;*;*   raylib [textures] example - Image loading and drawing on it;*;*   NOTE: Images are loaded in CPU memory (RAM); textures are loaded in GPU memory (VRAM);*;*   This example has been created using raylib 1.4 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Copyright (c) 2016 Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                  ; First we need to includeXIncludeFile "raylib.pbi"               ; the raylib-purebasic importEnableExplicit                          ; All variables have to be defined before useUseModule ray                           ; Import the module; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [textures] example - image drawing" )If Not IsWindowReady()                  ; After creating the window, we check    End                                 ; for errors at initialization.EndIf                                   ; In case of error at init we end the program.; NOTE: Textures MUST be loaded after Window initialization (OpenGL context is required)Define cat.Image, rect.RectangleLoadImageRaylib(@cat, "resources/cat.png")              ; Load image in CPU memory (RAM)InitRectangle(@rect, 100, 10, 280, 380)ImageCrop(@cat, @rect)                                  ; Crop an image pieceImageFlipHorizontal(@cat)                               ; Flip cropped image horizontallyImageResize(@cat, 150, 200)                             ; Resize flipped-cropped imageDefine parrots.Image, rect2.RectangleLoadImageRaylib(@parrots, "resources/parrots.png")      ; Load image in CPU memory (RAM); Draw one image over the other with a scaling of 1.5InitRectangle(@rect, 0, 0, cat\width, cat\height)InitRectangle(@rect2, 30, 40, cat\width*1.5, cat\height*1.5)ImageDraw(@parrots, @cat, @rect, @rect2, #COLOR_WHITE)InitRectangle(@rect, 0, 50, parrots\width, parrots\height - 100)ImageCrop(@parrots, @rect)                              ; Crop resulting image; Draw on the image with a few image draw methodsImageDrawPixel(@parrots, 10, 10, #COLOR_RAYWHITE)ImageDrawCircle(@parrots, 10, 10, 5, #COLOR_RAYWHITE)ImageDrawRectangle(@parrots, 5, 20, 10, 10, #COLOR_RAYWHITE)UnloadImage(@cat)                                       ; Unload image from RAM; Load custom font for frawing on imageDefine font.FontLoadFontRaylib(@font, "resources/custom_jupiter_crash.png"); Draw over image using custom fontDefine vec.Vector2 : InitVector2(@vec, 300, 230)ImageDrawTextEx(@parrots, @vec, @font, "PARROTS & CAT", font\baseSize, -2, #COLOR_WHITE); Unload custom spritefont (already drawn used on image)UnloadFont(@font)Define texture.Texture2DLoadTextureFromImage(@texture, @parrots)                ; Image converted to texture,                                                        ; uploaded to GPU memory (VRAM)UnloadImage(@parrots)                                   ; Once image has been converted                                                        ; to texture and uploaded to VRAM,                                                        ; it can be unloaded from RAMSetTargetFPS(60)                        ; Set our game to run at 60 frames-per-second;>-------------------------------------------------------------------------------------; Main game loopRepeat    ; Update    ;>---------------------------------------------------------------------------------    ; TODO: Update your variables here    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    BeginDrawing()            ClearBackground(#COLOR_RAYWHITE)        DrawTexture(@texture, #SCREEN_WIDTH  / 2 - texture\width  / 2,                              #SCREEN_HEIGHT / 2 - texture\height / 2 - 40,                              #COLOR_WHITE)        DrawRectangleLines(#SCREEN_WIDTH / 2 - texture\width  / 2,                           #SCREEN_HEIGHT/ 2 - texture\height / 2 - 40,                           texture\width, texture\height, #COLOR_DARKGRAY)        DrawTextRaylib("We are drawing only one texture from various images composed!", 240, 350, 10, #COLOR_DARKGRAY)        DrawTextRaylib("Source images have been cropped, scaled, flipped and copied one over the other.", 190, 370, 10, #COLOR_DARKGRAY)                EndDrawing()    ;>---------------------------------------------------------------------------------        If IsKeyPressed(#KEY_F1)        TakeScreenshot("screenshots/textures_image_drawing.png")    EndIf    Until WindowShouldClose()               ; Detect window close button or ESC key; De-Initialization;>-------------------------------------------------------------------------------------UnloadTexture(@texture)                 ; Texture unloadingCloseWindowRaylib()                     ; Close window and OpenGL context;>-------------------------------------------------------------------------------------