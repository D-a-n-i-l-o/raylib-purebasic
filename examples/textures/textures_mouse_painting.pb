;*******************************************************************************************;*;*   raylib [textures] example - Mouse painting;*;*   This example has been created using raylib 2.5 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Example contributed by Chris Dill (@MysteriousSpace) and reviewed by Ramon Santamaria (@raysan5);*;*   Copyright (c) 2019 Chris Dill (@MysteriousSpace) and Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                  ; First we need to includeXIncludeFile "raylib.pbi"               ; the raylib-purebasic importEnableExplicit                          ; All variables have to be defined before useUseModule ray                           ; Import the module#MAX_COLORS_COUNT = 23                  ; Number of colors available; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [textures] example - mouse painting" )If Not IsWindowReady()                  ; After creating the window, we check    End                                 ; for errors at initialization.EndIf                                   ; In case of error at init we end the program.; Colours to choose fromDim colors(#MAX_COLORS_COUNT)colors( 0) = #COLOR_RAYWHITE   : colors( 1) = #COLOR_YELLOW     : colors( 2) = #COLOR_GOLD       :colors( 3) = #COLOR_ORANGE     : colors( 4) = #COLOR_PINK       : colors( 5) = #COLOR_RED        :colors( 6) = #COLOR_MAROON     : colors( 7) = #COLOR_GREEN      : colors( 8) = #COLOR_LIME       :colors( 9) = #COLOR_DARKGREEN  : colors(10) = #COLOR_SKYBLUE    : colors(11) = #COLOR_BLUE       :colors(12) = #COLOR_DARKBLUE   : colors(13) = #COLOR_PURPLE     : colors(14) = #COLOR_VIOLET     :colors(15) = #COLOR_DARKPURPLE : colors(16) = #COLOR_BEIGE      : colors(17) = #COLOR_BROWN      :colors(18) = #COLOR_DARKBROWN  : colors(19) = #COLOR_LIGHTGRAY  : colors(20) = #COLOR_GRAY       :colors(21) = #COLOR_DARKGRAY   : colors(22) = #COLOR_BLACK; Define colorsRecs data (for every rectangle)Define iDim colorsRecs.Rectangle(#MAX_COLORS_COUNT)For i = 0 To #MAX_COLORS_COUNT - 1    colorsRecs(i)\x      = 10 + 30*i + 2*i    colorsRecs(i)\y      = 10    colorsRecs(i)\width  = 30;    colorsRecs(i)\height = 30;NextDefine colorSelectedDefine colorSelectedPrevDefine colorMouseHoverDefine brushSize = 20Define btnSaveRec.RectangleInitRectangle(@btnSaveRec, 750, 10, 40, 30)Define btnSaveMouseHover  = #FalseDefine showSaveMessage    = #FalseDefine saveMessageCounter; Create a RenderTexture2D to use as a canvasDefine target.RenderTexture2DLoadRenderTexture(@target, #SCREEN_WIDTH, #SCREEN_HEIGHT); Clear render texture before entering the game loopBeginTextureMode(@target)    ClearBackground( colors(0) )EndTextureMode()Define.Vector2   mousePos, vecDefine.Rectangle rectSetTargetFPS(120)                        ; Set our game to run at 60 frames-per-second;>-------------------------------------------------------------------------------------; Main game loopRepeat    ; Update    ;>---------------------------------------------------------------------------------    GetMousePosition(@mousePos)    ; Move between colors with keys    If     IsKeyPressed(#KEY_RIGHT) : colorSelected + 1    ElseIf IsKeyPressed(#KEY_LEFT)  : colorSelected - 1    EndIf    If colorSelected >= #MAX_COLORS_COUNT        colorSelected = #MAX_COLORS_COUNT - 1    ElseIf colorSelected < 0        colorSelected = 0    EndIf    ; Choose color with mouse    For i = 0 To #MAX_COLORS_COUNT - 1        If CheckCollisionPointRec(@mousePos, @colorsRecs(i))            colorMouseHover = i            Break        Else            colorMouseHover = -1        EndIf    Next    If colorMouseHover >= 0 And IsMouseButtonPressed(#MOUSE_LEFT_BUTTON)        colorSelected     = colorMouseHover        colorSelectedPrev = colorSelected    EndIf    ; Change brush size    brushSize + GetMouseWheelMove()*5    If brushSize < 2  : brushSize = 2  : EndIf    If brushSize > 50 : brushSize = 50 : EndIf    If IsKeyPressed(#KEY_C)        ; Clear render texture to clear color        BeginTextureMode(@target)            ClearBackground( colors(0) )        EndTextureMode()    EndIf    If IsMouseButtonDown(#MOUSE_LEFT_BUTTON) Or GetGestureDetected() = #GESTURE_DRAG        ; Paint circle into render texture        ; NOTE: To avoid discontinuous circles, we could store        ; previous-next mouse points and just draw a line using brush size        BeginTextureMode(@target)            If mousePos\y > 50                DrawCircle(mousePos\x, mousePos\y, brushSize, colors(colorSelected))            EndIf        EndTextureMode()    EndIf    If IsMouseButtonDown(#MOUSE_RIGHT_BUTTON)        colorSelected = 0        ; Erase circle from render texture        BeginTextureMode(@target)            If mousePos\y > 50                DrawCircle(mousePos\x, mousePos\y, brushSize, colors(0))            EndIf        EndTextureMode()    Else        colorSelected = colorSelectedPrev    EndIf    ; Check mouse hover save button    If CheckCollisionPointRec(@mousePos, @btnSaveRec)        btnSaveMouseHover = #True    Else        btnSaveMouseHover = #False    EndIf    ; Image saving logic    ; NOTE: Saving painted texture to a default named image    If (btnSaveMouseHover And IsMouseButtonReleased(#MOUSE_LEFT_BUTTON)) Or IsKeyPressed(#KEY_S)        Define image.Image        GetTextureData(@image, @target\texture)        ImageFlipVertical(@image)        ExportImage(@image, "my_amazing_texture_painting.png")        UnloadImage(@image)        showSaveMessage = #True    EndIf    If showSaveMessage        ; On saving, show a full screen message for 2 seconds        saveMessageCounter + 1        If saveMessageCounter > 240            showSaveMessage = #False            saveMessageCounter = 0        EndIf    EndIf    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    BeginDrawing()            ClearBackground(#COLOR_RAYWHITE)        ; NOTE: Render texture must be y-flipped due to default OpenGL coordinates (left-bottom)        InitRectangle(@rect, 0, 0, target\texture\width, -target\texture\height)        InitVector2(@vec, 0, 0)        DrawTextureRec(@target\texture, @rect, @vec, #COLOR_WHITE)        ; Draw drawing circle for reference        If mousePos\y > 50            If IsMouseButtonDown(#MOUSE_RIGHT_BUTTON)                DrawCircleLines(mousePos\x, mousePos\y, brushSize, #COLOR_GRAY)            Else                DrawCircle(GetMouseX(), GetMouseY(), brushSize, colors(colorSelected))            EndIf        EndIf        ; Draw top panel        DrawRectangle(0, 0, GetScreenWidth(), 50, #COLOR_RAYWHITE)        DrawLine(0, 50, GetScreenWidth(), 50, #COLOR_LIGHTGRAY)        ; Draw color selection rectangles        For i = 0 To #MAX_COLORS_COUNT - 1            DrawRectangleRec(@colorsRecs(i), colors(i))        Next        DrawRectangleLines(10, 10, 30, 30, #COLOR_LIGHTGRAY)        If colorMouseHover >= 0            DrawRectangleRec(@colorsRecs(colorMouseHover), Fade(#COLOR_WHITE, 0.6))        EndIf        InitRectangle(@rect, colorsRecs(colorSelected)\x - 2,                             colorsRecs(colorSelected)\y - 2,                             colorsRecs(colorSelected)\width  + 4,                             colorsRecs(colorSelected)\height + 4 )        DrawRectangleLinesEx(@rect, 2, #COLOR_BLACK)        ; Draw save image button        Define col        If btnSaveMouseHover : col = #COLOR_RED : Else : col = #COLOR_BLACK : EndIf        DrawRectangleLinesEx(@btnSaveRec, 2, col)        DrawTextRaylib("SAVE!", 755, 20, 10, col)        ; Draw save image message        If showSaveMessage            DrawRectangle(0, 0, GetScreenWidth(), GetScreenHeight(), Fade(#COLOR_RAYWHITE, 0.8))            DrawRectangle(0, 150, GetScreenWidth(), 80, #COLOR_BLACK)            DrawTextRaylib("IMAGE SAVED:  my_amazing_texture_painting.png", 150, 180, 20, #COLOR_RAYWHITE)        EndIf    EndDrawing()    ;>---------------------------------------------------------------------------------        If IsKeyPressed(#KEY_F1)        TakeScreenshot("screenshots/textures_mouse_painting.png")    EndIf    Until WindowShouldClose()               ; Detect window close button or ESC key; De-Initialization;>-------------------------------------------------------------------------------------UnloadRenderTexture(@target)            ; Unload render textureCloseWindowRaylib()                     ; Close window and OpenGL context;>-------------------------------------------------------------------------------------