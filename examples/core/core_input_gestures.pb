;*******************************************************************************************;*;*   raylib [core] example - Input Gestures Detection;*;*   This example has been created using raylib 1.4 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Copyright (c) 2016 Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                      ; First we need to includeXIncludeFile "raylib.pbi"                   ; the raylib-purebasic importEnableExplicit; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450#MAX_GESTURE_STRINGS = 20ray::InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [core] example - input gestures" )If Not ray::IsWindowReady()                 ; After creating the window, we check    End                                     ; for errors at initialization.EndIf                                       ; In case of error at init we end the program.ray::SetTargetFPS(60)                       ; Set our game to run at 60 frames-per-secondDefine touchPosition.ray::Vector2ray::InitVector2(@touchPosition)Define touchArea.ray::Rectangleray::InitRectangle(@touchArea, 220, 10, #SCREEN_WIDTH - 230, #SCREEN_HEIGHT - 20)Define gesturesCount = 0Dim gestureStrings.s(#MAX_GESTURE_STRINGS)Define currentGesture = ray::#GESTURE_NONEDefine lastGesture = ray::#GESTURE_NONEDefine i;ray::SetGesturesEnabled(%0000000000001001) ; Enable only some gestures to be detected;>-------------------------------------------------------------------------------------; Main game loopWhile Not ray::WindowShouldClose()          ; Detect window close button or ESC key    ; Update    ;>---------------------------------------------------------------------------------    lastGesture = currentGesture;    currentGesture = ray::GetGestureDetected()    ray::GetTouchPosition(@touchPosition, 0)    If ray::CheckCollisionPointRec(@touchPosition, @touchArea) And currentGesture <> ray::#GESTURE_NONE        If currentGesture <> lastGesture            ; Store gesture string            Select currentGesture                Case ray::#GESTURE_TAP:         gestureStrings(gesturesCount) = "GESTURE TAP"                Case ray::#GESTURE_DOUBLETAP:   gestureStrings(gesturesCount) = "GESTURE DOUBLETAP"                Case ray::#GESTURE_HOLD:        gestureStrings(gesturesCount) = "GESTURE HOLD"                Case ray::#GESTURE_DRAG:        gestureStrings(gesturesCount) = "GESTURE DRAG"                Case ray::#GESTURE_SWIPE_RIGHT: gestureStrings(gesturesCount) = "GESTURE SWIPE RIGHT"                Case ray::#GESTURE_SWIPE_LEFT:  gestureStrings(gesturesCount) = "GESTURE SWIPE LEFT"                Case ray::#GESTURE_SWIPE_UP:    gestureStrings(gesturesCount) = "GESTURE SWIPE UP"                Case ray::#GESTURE_SWIPE_DOWN:  gestureStrings(gesturesCount) = "GESTURE SWIPE DOWN"                Case ray::#GESTURE_PINCH_IN:    gestureStrings(gesturesCount) = "GESTURE PINCH IN"                Case ray::#GESTURE_PINCH_OUT:   gestureStrings(gesturesCount) = "GESTURE PINCH OUT"            EndSelect            gesturesCount + 1            ; Reset gestures strings            If gesturesCount >= #MAX_GESTURE_STRINGS                For i = 0 To #MAX_GESTURE_STRINGS -1                    gestureStrings(i) = ""                Next                gesturesCount = 0            EndIf        EndIf    EndIf    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    ray::BeginDrawing()            ray::ClearBackground(ray::#COLOR_RAYWHITE)        ray::DrawRectangleRec(@touchArea, ray::#COLOR_GRAY)        ray::DrawRectangle(225, 15, #SCREEN_WIDTH - 240, #SCREEN_HEIGHT - 30, ray::#COLOR_RAYWHITE)        ray::DrawTextRaylib("GESTURES TEST AREA", #SCREEN_WIDTH - 270, #SCREEN_HEIGHT - 40, 20, ray::Fade(ray::#COLOR_GRAY, 0.5))        For i = 0 To gesturesCount - 1            If i % 2 = 0                ray::DrawRectangle(10, 30 + 20*i, 200, 20, ray::Fade(ray::#COLOR_LIGHTGRAY, 0.5))            Else                ray::DrawRectangle(10, 30 + 20*i, 200, 20, ray::Fade(ray::#COLOR_LIGHTGRAY, 0.3))            EndIf            If i < gesturesCount - 1                ray::DrawTextRaylib(gestureStrings(i), 35, 36 + 20*i, 10, ray::#COLOR_DARKGRAY)            Else                ray::DrawTextRaylib(gestureStrings(i), 35, 36 + 20*i, 10, ray::#COLOR_MAROON)            EndIf        Next        ray::DrawRectangleLines(10, 29, 200, #SCREEN_HEIGHT - 50, ray::#COLOR_GRAY)        ray::DrawTextRaylib("DETECTED GESTURES", 50, 15, 10, ray::#COLOR_GRAY)        If currentGesture <> ray::#GESTURE_NONE            ray::DrawCircleV(@touchPosition, 30, ray::#COLOR_MAROON)        EndIf        ray::DrawFPS(250,20)    ray::EndDrawing()    ;>---------------------------------------------------------------------------------        ; If we want to have a screenshot    If ray::IsKeyPressed(ray::#KEY_F1)        ray::TakeScreenshot("screenshots/core_input_gestures.png")    EndIfWend; De-Initialization;>-------------------------------------------------------------------------------------ray::CloseWindowRaylib()                ; Close window and OpenGL context;>-------------------------------------------------------------------------------------