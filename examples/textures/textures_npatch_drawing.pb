;*******************************************************************************************;*;*   raylib [textures] example - N-patch drawing;*;*   NOTE: Images are loaded in CPU memory (RAM); textures are loaded in GPU memory (VRAM);*;*   This example has been created using raylib 2.0 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Example contributed by Jorge A. Gomes (@overdev) and reviewed by Ramon Santamaria (@raysan5);*;*   Copyright (c) 2018 Jorge A. Gomes (@overdev) and Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                  ; First we need to includeXIncludeFile "raylib.pbi"               ; the raylib-purebasic importEnableExplicit                          ; All variables have to be defined before useUseModule ray                           ; Import the module; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [textures] example - N-patch drawing" )If Not IsWindowReady()                  ; After creating the window, we check    End                                 ; for errors at initialization.EndIf                                   ; In case of error at init we end the program.; NOTE: Textures MUST be loaded after Window initialization (OpenGL context is required)Define nPatchTexture.Texture2DLoadTextureRaylib(@nPatchTexture, "resources/ninepatch_button.png")Define.Vector2 mousePosition, origin; Position and size of the n-patchesDefine.Rectangle dstRec1, dstRec2, dstRecH, dstRecVInitRectangle(@dstRec1, 480.0, 160.0, 32.0, 32.0)InitRectangle(@dstRec2, 160.0, 160.0, 32.0, 32.0)InitRectangle(@dstRecH, 160.0,  93.0, 32.0, 32.0)InitRectangle(@dstRecV,  92.0, 160.0, 32.0, 32.0); A 9-patch (NPT_9PATCH) changes its sizes in both axisDefine.NPatchInfo ninePatchInfo1, ninePatchInfo2InitRectangle(@ninePatchInfo1\sourceRec, 0.0, 0.0, 64.0, 64.0)ninePatchInfo1\left   = 12ninePatchInfo1\top    = 40ninePatchInfo1\right  = 12ninePatchInfo1\bottom = 12ninePatchInfo1\type   = #NPT_9PATCHInitRectangle(@ninePatchInfo2\sourceRec, 0.0, 128.0, 64.0, 64.0)ninePatchInfo2\left   = 16ninePatchInfo2\top    = 16ninePatchInfo2\right  = 16ninePatchInfo2\bottom = 16ninePatchInfo2\type   = #NPT_9PATCH; A horizontal 3-patch (NPT_3PATCH_HORIZONTAL) changes its sizes along the x axis onlyDefine h3PatchInfo.NPatchInfoInitRectangle(@h3PatchInfo\sourceRec, 0.0,  64.0, 64.0, 64.0)h3PatchInfo\left   = 8h3PatchInfo\top    = 8h3PatchInfo\right  = 8h3PatchInfo\bottom = 8h3PatchInfo\type   = #NPT_3PATCH_HORIZONTAL; A vertical 3-patch (NPT_3PATCH_VERTICAL) changes its sizes along the y axis onlyDefine v3PatchInfo.NPatchInfoInitRectangle(@v3PatchInfo\sourceRec, 0.0, 192.0, 64.0, 64.0)v3PatchInfo\left   = 6v3PatchInfo\top    = 6v3PatchInfo\right  = 6v3PatchInfo\bottom = 6v3PatchInfo\type   = #NPT_3PATCH_VERTICALSetTargetFPS(60)                        ; Set our game to run at 60 frames-per-second;>-------------------------------------------------------------------------------------; Main game loopRepeat    ; Update    ;>---------------------------------------------------------------------------------    GetMousePosition(@mousePosition)    ; Resize the n-patches based on mouse position    dstRec1\width  = mousePosition\x - dstRec1\x    dstRec1\height = mousePosition\y - dstRec1\y    dstRec2\width  = mousePosition\x - dstRec2\x    dstRec2\height = mousePosition\y - dstRec2\y    dstRecH\width  = mousePosition\x - dstRecH\x    dstRecV\height = mousePosition\y - dstRecV\y    ; Set a minimum width and/or height    If dstRec1\width  <   1.0 : dstRec1\width  =   1.0 : EndIf    If dstRec1\width  > 300.0 : dstRec1\width  = 300.0 : EndIf    If dstRec1\height <   1.0 : dstRec1\height =   1.0 : EndIf    If dstRec2\width  <   1.0 : dstRec2\width  =   1.0 : EndIf    If dstRec2\width  > 300.0 : dstRec2\width  = 300.0 : EndIf    If dstRec2\height <   1.0 : dstRec2\height =   1.0 : EndIf    If dstRecH\width  <   1.0 : dstRecH\width  =   1.0 : EndIf    If dstRecV\height <   1.0 : dstRecV\height =   1.0 : EndIf    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    BeginDrawing()            ClearBackground(#COLOR_RAYWHITE)        ; Draw the n-patches        DrawTextureNPatch(@nPatchTexture, @ninePatchInfo2, @dstRec2, @origin, 0.0, #COLOR_WHITE)        DrawTextureNPatch(@nPatchTexture, @ninePatchInfo1, @dstRec1, @origin, 0.0, #COLOR_WHITE)        DrawTextureNPatch(@nPatchTexture, @h3PatchInfo,    @dstRecH, @origin, 0.0, #COLOR_WHITE)        DrawTextureNPatch(@nPatchTexture, @v3PatchInfo,    @dstRecV, @origin, 0.0, #COLOR_WHITE)        ; Draw the source texture        DrawRectangleLines(5, 88, 74, 266, #COLOR_BLUE)        DrawTexture(@nPatchTexture, 10, 93, #COLOR_WHITE)        DrawTextRaylib("TEXTURE", 15, 360, 10, #COLOR_DARKGRAY)        DrawTextRaylib("Move the mouse to stretch or shrink the n-patches", 10, 20, 20, #COLOR_DARKGRAY)    EndDrawing()    ;>---------------------------------------------------------------------------------        If IsKeyPressed(#KEY_F1)        TakeScreenshot("screenshots/textures_npatch_drawing.png")    EndIf    Until WindowShouldClose()               ; Detect window close button or ESC key; De-Initialization;>-------------------------------------------------------------------------------------UnloadTexture(@nPatchTexture)           ; Texture unloadingCloseWindowRaylib()                     ; Close window and OpenGL context;>-------------------------------------------------------------------------------------