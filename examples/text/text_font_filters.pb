;*******************************************************************************************;*;*   raylib [text] example - Font filters;*;*   After font loading, font texture atlas filter could be configured for a softer;*   display of the font when scaling it to different sizes, that way, it's not required;*   to generate multiple fonts at multiple sizes (as long as the scaling is not very different);*;*   This example has been created using raylib 1.3.0 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                  ; First we need to includeXIncludeFile "raylib.pbi"               ; the raylib-purebasic importEnableExplicit                          ; All variables have to be defined before useUseModule ray                           ; Import the module; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450SetConfigFlags(#FLAG_WINDOW_RESIZABLE)InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [text] example - font filters" )If Not IsWindowReady()                  ; After creating the window, we check    End                                 ; for errors at initialization.EndIf                                   ; In case of error at init we end the program.Define msg.s = "Loaded Font"; NOTE: Textures/Fonts MUST be loaded after Window initialization (OpenGL context is required); TTF Font loading with custom generation parametersDefine font.FontLoadFontEx(@font, "resources/KAISG.ttf", 96, 0, 0); Generate mipmap levels to use trilinear filtering; NOTE: On 2D drawing it won't be noticeable, it looks like FILTER_BILINEARGenTextureMipmaps(@font\texture)Define fontSize.f = font\baseSizeDefine.Vector2 fontPosition, textSizeInitVector2( @fontPosition, 40, #SCREEN_HEIGHT/2 - 80 )InitVector2( @textSize, 0.0, 0.0 ); Setup texture scaling filterSetTextureFilter(@font\texture, #FILTER_POINT)Define currentFontFilter = 0            ; FILTER_POINTDim fileNames.s(0)SetTargetFPS(60)                        ; Set our game to run at 60 frames-per-second;>-------------------------------------------------------------------------------------; Main game loopWhile Not WindowShouldClose()           ; Detect window close button or ESC key    ; Update    ;>---------------------------------------------------------------------------------    fontSize + GetMouseWheelMove()*4.0    ; Choose font texture filter method    If IsKeyPressed(#KEY_ONE)        SetTextureFilter(@font\texture, #FILTER_POINT)        currentFontFilter = 0    ElseIf IsKeyPressed(#KEY_TWO)        SetTextureFilter(@font\texture, #FILTER_BILINEAR)        currentFontFilter = 1    ElseIf IsKeyPressed(#KEY_THREE)        ; NOTE: Trilinear filter won't be noticed on 2D drawing        SetTextureFilter(@font\texture, #FILTER_TRILINEAR)        currentFontFilter = 2    EndIf    MeasureTextEx(@textSize, @font, msg, fontSize, 0)    If IsKeyDown(#KEY_LEFT)        fontPosition\x - 10    ElseIf IsKeyDown(#KEY_RIGHT)        fontPosition\x + 10    EndIf    ; Load a dropped TTF file dynamically (at current fontSize)    If IsFileDropped()        GetDroppedFiles( fileNames() )        ; NOTE: We only support first ttf file dropped        If IsFileExtension(fileNames(0), ".ttf")            UnloadFont(@font)            LoadFontEx(@font, fileNames(0), fontSize, 0, 0)            ClearDroppedFiles()        EndIf    EndIf    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    BeginDrawing()            ClearBackground(#COLOR_RAYWHITE)        DrawTextRaylib("Use mouse wheel to change font size", 20, 20, 10, #COLOR_GRAY)        DrawTextRaylib("Use KEY_RIGHT and KEY_LEFT to move text", 20, 40, 10, #COLOR_GRAY)        DrawTextRaylib("Use 1, 2, 3 to change texture filter", 20, 60, 10, #COLOR_GRAY)        DrawTextRaylib("Drop a new TTF font for dynamic loading", 20, 80, 10, #COLOR_DARKGRAY)        DrawTextEx(@font, msg, @fontPosition, fontSize, 0, #COLOR_BLACK)        ; TODO: It seems texSize measurement is not accurate due to chars offsets...        DrawRectangleLines(fontPosition\x, fontPosition\y, textSize\x, textSize\y, #COLOR_RED)        DrawRectangle(0, GetScreenHeight() - 80, GetScreenWidth(), 80, #COLOR_LIGHTGRAY)        DrawTextRaylib("Font size: "+StrF(fontSize,2), 20, GetScreenHeight() - 50, 10, #COLOR_DARKGRAY)        DrawTextRaylib("Text size: ["+StrF(TextSize\x,2)+", "+StrF(TextSize\y,2)+"]", 20, GetScreenHeight() - 30, 10, #COLOR_DARKGRAY)        DrawTextRaylib("CURRENT TEXTURE FILTER:", 259, GetScreenHeight()-50, 20, #COLOR_GRAY)        If currentFontFilter = 0            DrawTextRaylib("POINT", 570, GetScreenHeight()-50, 20, #COLOR_BLACK)        ElseIf currentFontFilter = 1            DrawTextRaylib("BILINEAR", 570, GetScreenHeight()-50, 20, #COLOR_BLACK)        ElseIf currentFontFilter = 2            DrawTextRaylib("TRILINEAR", 570, GetScreenHeight()-50, 20, #COLOR_BLACK)        EndIf    EndDrawing()    ;>---------------------------------------------------------------------------------        If IsKeyPressed(#KEY_F1)        TakeScreenshot("screenshots/text_font_filters.png")    EndIf    Wend; De-Initialization;>-------------------------------------------------------------------------------------ClearDroppedFiles()             ; Clear internal buffersUnloadFont(@font)               ; Font unloadingCloseWindowRaylib()             ; Close window and OpenGL context;>-------------------------------------------------------------------------------------