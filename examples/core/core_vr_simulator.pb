;*******************************************************************************************;*;*   raylib [core] example - VR Simulator (Oculus Rift CV1 parameters);*;*   This example has been created using raylib 1.7 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Copyright (c) 2017 Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                  ; First we need to includeXIncludeFile "raylib.pbi"               ; the raylib-purebasic importEnableExplicit                          ; All variables have to be defined before useUseModule ray                           ; Import the module; Desktop#GLSL_VERSION = "330"; PLATFORM_RPI, PLATFORM_ANDROID, PLATFORM_WEB;#GLSL_VERSION = "100"; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450; NOTE: '#SCREEN_WIDTH / #SCREEN_HEIGHT' should match VR device aspect ratioSetConfigFlags(#FLAG_MSAA_4X_HINT)InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [core] example - vr simulator" )If Not IsWindowReady()                  ; After creating the window, we check    End                                 ; for errors at initialization.EndIf                                   ; In case of error at init we end the program.; Init VR simulator (Oculus Rift CV1 parameters)InitVrSimulator()Define hmd.VrDeviceInfo                 ; VR device parameters (head-mounted-device); Oculus Rift CV1 parameters for simulatorhmd\hResolution = 2160                  ; HMD horizontal resolution in pixelshmd\vResolution = 1200                  ; HMD vertical resolution in pixelshmd\hScreenSize = 0.133793              ; HMD horizontal size in metershmd\vScreenSize = 0.0669                ; HMD vertical size in metershmd\vScreenCenter = 0.04678             ; HMD screen center in metershmd\eyeToScreenDistance = 0.041         ; HMD distance between eye and display in metershmd\lensSeparationDistance = 0.07       ; HMD lens separation distance in metershmd\interpupillaryDistance = 0.07       ; HMD IPD (distance between pupils) in meters; NOTE: CV1 uses a Fresnel-hybrid-asymmetric lenses with specific distortion compute shaders.; Following parameters are an approximation to distortion stereo rendering but results differ from actual device.hmd\lensDistortionValues[0] = 1.0       ; HMD lens distortion constant parameter 0hmd\lensDistortionValues[1] = 0.22      ; HMD lens distortion constant parameter 1hmd\lensDistortionValues[2] = 0.24      ; HMD lens distortion constant parameter 2hmd\lensDistortionValues[3] = 0.0       ; HMD lens distortion constant parameter 3hmd\chromaAbCorrection[0] = 0.996       ; HMD chromatic aberration correction parameter 0hmd\chromaAbCorrection[1] = -0.004      ; HMD chromatic aberration correction parameter 1hmd\chromaAbCorrection[2] = 1.014       ; HMD chromatic aberration correction parameter 2hmd\chromaAbCorrection[3] = 0.0         ; HMD chromatic aberration correction parameter 3; Distortion shader (uses device lens distortion and chroma)Define distortion.ShaderLoadShader(@distortion, "", "resources/distortion"+#GLSL_VERSION+".fs")SetVrConfiguration(@hmd, @distortion)   ; Set Vr device parameters for stereo rendering; Define the camera to look into our 3d worldDefine camera.CameraInitVector3( @camera\position, 5.0, 2.0, 5.0 )  ; Camera positionInitVector3( @camera\target,   0.0, 2.0, 0.0 )  ; Camera looking at pointInitVector3( @camera\up,       0.0, 1.0, 0.0 )  ; Camera up vector (rotation towards target)camera\fovy = 60.0                              ; Camera field-of-view Ycamera\type = #CAMERATYPE_PERSPECTIVE           ; Camera typeDefine.Vector3 cubePositionSetCameraMode(@camera, #CAMERAMODE_FIRST_PERSON); Set first person camera modeSetTargetFPS(90)                        ; Set our game to run at 90 frames-per-second;>-------------------------------------------------------------------------------------; Main game loopWhile Not WindowShouldClose()           ; Detect window close button or ESC key    ; Update    ;>---------------------------------------------------------------------------------    UpdateCamera(@camera)               ; Update camera (simulator mode)    If IsKeyPressed(#KEY_SPACE)        ToggleVrMode()                  ; Toggle VR mode    EndIf    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    BeginDrawing()            ClearBackground(#COLOR_RAYWHITE)        BeginVrDrawing()            BeginMode3D(@camera)                DrawCube(@cubePosition, 2.0, 2.0, 2.0, #COLOR_RED)                DrawCubeWires(@cubePosition, 2.0, 2.0, 2.0, #COLOR_MAROON)                DrawGrid(40, 1.0)            EndMode3D()        EndVrDrawing()        DrawFPS(10, 10)    EndDrawing()    ;>---------------------------------------------------------------------------------        If IsKeyPressed(#KEY_F1)        TakeScreenshot("screenshots/core_vr_simulator.png")    EndIf    Wend; De-Initialization;>-------------------------------------------------------------------------------------UnloadShader(@distortion)               ; Unload distortion shaderCloseVrSimulator()                      ; Close VR simulatorCloseWindowRaylib()                     ; Close window and OpenGL context;>-------------------------------------------------------------------------------------