;*******************************************************************************************;*;*   raylib [shapes] example - bouncing ball;*;*   This example has been created using raylib 1.0 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Copyright (c) 2013 Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                  ; First we need to includeXIncludeFile "raylib.pbi"               ; the raylib-purebasic importEnableExplicit                          ; All variables have to be defined before useUseModule ray                           ; Import the module; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [shapes] example - bouncing ball" )If Not IsWindowReady()                  ; After creating the window, we check    End                                 ; for errors at initialization.EndIf                                   ; In case of error at init we end the program.Define.Vector2 ballPosition, ballSpeedInitVector2(@ballPosition, GetScreenWidth()/2, GetScreenHeight()/2)InitVector2(@ballSpeed, 5.0, 4.0)Define ballRadius = 20, pause, framesCounterSetTargetFPS(60)                        ; Set our game to run at 60 frames-per-second;>-------------------------------------------------------------------------------------; Main game loopWhile Not WindowShouldClose()           ; Detect window close button or ESC key    ; Update    ;>---------------------------------------------------------------------------------    If IsKeyPressed(#KEY_SPACE)        pause ! 1    EndIf    If Not pause        ballPosition\x + ballSpeed\x        ballPosition\y + ballSpeed\y        ; Check walls collision for bouncing        If ballPosition\x >= GetScreenWidth() - ballRadius Or ballPosition\x <= ballRadius            ballSpeed\x * -1.0        EndIf        If ballPosition\y >= GetScreenHeight() - ballRadius Or ballPosition\y <= ballRadius            ballSpeed\y * -1.0        EndIf    Else        framesCounter + 1    EndIf    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    BeginDrawing()            ClearBackground(#COLOR_RAYWHITE)                DrawCircleV(@ballPosition, ballRadius, #COLOR_MAROON)        DrawTextRaylib("PRESS SPACE to PAUSE BALL MOVEMENT", 10, GetScreenHeight() - 25, 20, #COLOR_LIGHTGRAY)        ; On pause, we draw a blinking message        If pause And ((framesCounter/30)%2)            DrawTextRaylib("PAUSED", 350, 200, 30, #COLOR_GRAY)        EndIf        DrawFPS(10, 10)    EndDrawing()    ;>---------------------------------------------------------------------------------        If IsKeyPressed(#KEY_F1)        TakeScreenshot("screenshots/shapes_bouncing_ball.png")    EndIf    Wend; De-Initialization;>-------------------------------------------------------------------------------------CloseWindowRaylib()                     ; Close window and OpenGL context;>-------------------------------------------------------------------------------------