;*******************************************************************************************;*;*   raylib [textures] example - Load textures from raw data;*;*   NOTE: Images are loaded in CPU memory (RAM); textures are loaded in GPU memory (VRAM);*;*   This example has been created using raylib 1.3 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Copyright (c) 2015 Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                  ; First we need to includeXIncludeFile "raylib.pbi"               ; the raylib-purebasic importEnableExplicit                          ; All variables have to be defined before useUseModule ray                           ; Import the module; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [textures] example - texture from raw data" )If Not IsWindowReady()                  ; After creating the window, we check    End                                 ; for errors at initialization.EndIf                                   ; In case of error at init we end the program.; NOTE: Textures MUST be loaded after Window initialization (OpenGL context is required)Define fudesumiRaw.Image, fudesumi.Texture2D; Load RAW image data (512x512, 32bit RGBA, no file header)LoadImageRaw(@fudesumiRaw, "resources/fudesumi.raw", 384, 512, #UNCOMPRESSED_R8G8B8A8, 0)LoadTextureFromImage(@fudesumi, @fudesumiRaw)   ; Upload CPU (RAM) image to GPU (VRAM)UnloadImage(@fudesumiRaw)                       ; Unload CPU (RAM) image data; Generate a checked texture by codeDefine width = 960Define height = 480Define x, y, checkedIm.Image, checked.Texture2D; Dynamic memory allocation to store pixels data (Color type)Define *pixels = AllocateMemory(width*height*SizeOf(Color))If *pixels    For y = 0 To height-1        For x = 0 To width-1            If ((x/32+y/32)/1)%2 = 0                PokeL(*pixels + y*width*SizeOf(Long) + x*SizeOf(Long), #COLOR_ORANGE)            Else                PokeL(*pixels + y*width*SizeOf(Long) + x*SizeOf(Long), #COLOR_GOLD)            EndIf        Next    Next    ; Load pixels data into an image structure and create texture    LoadImageEx(@checkedIm, *pixels, width, height)    LoadTextureFromImage(@checked, @checkedIm)    UnloadImage(@checkedIm)             ; Unload CPU (RAM) image data    ; Dynamic memory must be freed after using it    FreeMemory(*pixels)                 ; Unload CPU (RAM) pixels dataEndIfSetTargetFPS(60)                        ; Set our game to run at 60 frames-per-second;>-------------------------------------------------------------------------------------; Main game loopRepeat    ; Update    ;>---------------------------------------------------------------------------------    ; TODO: Update your variables here    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    BeginDrawing()            ClearBackground(#COLOR_RAYWHITE)        DrawTexture(@checked, #SCREEN_WIDTH / 2 - checked\width  / 2,                              #SCREEN_HEIGHT/ 2 - checked\height / 2,                              Fade(#COLOR_WHITE, 0.5))        DrawTexture(@fudesumi, 430, -30, #COLOR_WHITE)        DrawTextRaylib("CHECKED TEXTURE ", 84, 85, 30, #COLOR_BROWN)        DrawTextRaylib("GENERATED by CODE", 72, 148, 30, #COLOR_BROWN)        DrawTextRaylib("and RAW IMAGE LOADING", 46, 210, 30, #COLOR_BROWN)        DrawTextRaylib("(c) Fudesumi sprite by Eiden Marsal", 310, #SCREEN_HEIGHT- 20, 10, #COLOR_BROWN)    EndDrawing()    ;>---------------------------------------------------------------------------------        If IsKeyPressed(#KEY_F1)        TakeScreenshot("screenshots/textures_raw_data.png")    EndIf    Until WindowShouldClose()               ; Detect window close button or ESC key; De-Initialization;>-------------------------------------------------------------------------------------UnloadTexture(@fudesumi)                ; Texture unloadingUnloadTexture(@checked)                 ; Texture unloadingCloseWindowRaylib()                     ; Close window and OpenGL context;>-------------------------------------------------------------------------------------