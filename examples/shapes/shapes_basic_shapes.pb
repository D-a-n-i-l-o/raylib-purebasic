;*******************************************************************************************;*;*   raylib [shapes] example - Draw basic shapes 2d (rectangle, circle, line...);*;*   This example has been created using raylib 1.0 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Copyright (c) 2014 Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                  ; First we need to includeXIncludeFile "raylib.pbi"               ; the raylib-purebasic importEnableExplicit                          ; All variables have to be defined before useUseModule ray                           ; Import the module; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [shapes] example - basic shapes drawing" )If Not IsWindowReady()                  ; After creating the window, we check    End                                 ; for errors at initialization.EndIf                                   ; In case of error at init we end the program.Define.Vector2 v1, v2, v3SetTargetFPS(60)                        ; Set our game to run at 60 frames-per-second;>-------------------------------------------------------------------------------------; Main game loopWhile Not WindowShouldClose()           ; Detect window close button or ESC key    ; Update    ;>---------------------------------------------------------------------------------    ; TODO: Update your variables here    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    BeginDrawing()            ClearBackground(#COLOR_RAYWHITE)        DrawTextRaylib("some basic shapes available on raylib", 20, 20, 20, #COLOR_DARKGRAY)        DrawCircle(#SCREEN_WIDTH/4, 120, 35, #COLOR_DARKBLUE)        DrawRectangle(#SCREEN_WIDTH/4*2 - 60, 100, 120, 60, #COLOR_RED)                DrawRectangleLines(#SCREEN_WIDTH/4*2 - 40, 320, 80, 60, #COLOR_ORANGE)  ; NOTE: Uses QUADS internally, not lines        DrawRectangleGradientH(#SCREEN_WIDTH/4*2 - 90, 170, 180, 130, #COLOR_MAROON, #COLOR_GOLD)                InitVector2(@v1,#SCREEN_WIDTH/4*3, 80)        InitVector2(@v2,#SCREEN_WIDTH/4*3 - 60, 150)        InitVector2(@v3,#SCREEN_WIDTH/4*3 + 60, 150)        DrawTriangle(@v1,@v2,@v3, #COLOR_VIOLET)                InitVector2(@v1,#SCREEN_WIDTH/4*3, 320)        DrawPoly(@v1, 6, 80, 0, #COLOR_BROWN)        DrawCircleGradient(#SCREEN_WIDTH/4, 220, 60, #COLOR_GREEN, #COLOR_SKYBLUE);        ; NOTE: We draw all LINES based shapes together To optimize internal drawing,        ; this way, all LINES are rendered in a single draw pass        DrawLine(18, 42, #SCREEN_WIDTH - 18, 42, #COLOR_BLACK)        DrawCircleLines(#SCREEN_WIDTH/4, 340, 80, #COLOR_DARKBLUE)                InitVector2(@v1,#SCREEN_WIDTH/4*3, 160)        InitVector2(@v2,#SCREEN_WIDTH/4*3 - 20, 230)        InitVector2(@v3,#SCREEN_WIDTH/4*3 + 20, 230)        DrawTriangleLines(@v1,@v2,@v3, #COLOR_DARKBLUE)    EndDrawing()    ;>---------------------------------------------------------------------------------        If IsKeyPressed(#KEY_F1)        TakeScreenshot("screenshots/shapes_basic_shapes.png")    EndIf    Wend; De-Initialization;>-------------------------------------------------------------------------------------CloseWindowRaylib()                     ; Close window and OpenGL context;>-------------------------------------------------------------------------------------