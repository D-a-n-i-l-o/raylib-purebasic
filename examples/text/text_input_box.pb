;*******************************************************************************************;*;*   raylib [text] example - Input Box;*;*   This example has been created using raylib 1.7 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Copyright (c) 2017 Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*          - changed to allow different cursors;*          - changed to allow unlimited input;*          - changed to allow repeating backspace;*;********************************************************************************************IncludePath "./../../"                  ; First we need to includeXIncludeFile "raylib.pbi"               ; the raylib-purebasic importEnableExplicit                          ; All variables have to be defined before useUseModule ray                           ; Import the module#CURSOR = "|" ; "_" "<" "|"#REPEAT_DELAY = 10; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [text] example - input box" )If Not IsWindowReady()                  ; After creating the window, we check    End                                 ; for errors at initialization.EndIf                                   ; In case of error at init we end the program.Define name.s, actualCursor.sDefine backspaceDelay, framesCounterDefine mouseOnText = #FalseDefine textBox.Rectangle, mouse.Vector2InitRectangle(@textBox, #SCREEN_WIDTH/2 - 150, 180, 325, 50)SetTargetFPS(60)                        ; Set our game to run at 60 frames-per-second;>-------------------------------------------------------------------------------------; Main game loopWhile Not WindowShouldClose()           ; Detect window close button or ESC key    ; Update    ;>---------------------------------------------------------------------------------    GetMousePosition(@mouse)    If CheckCollisionPointRec(@mouse, @textBox)        mouseOnText = #True    Else        mouseOnText = #False    EndIf    If mouseOnText        framesCounter + 1                ; Get pressed key (character) on the queue        Define key = GetKeyPressed()        ; Check if more characters have been pressed on the same frame        While (key > 0)            ; NOTE: Only allow keys in range [32..125]            If key >= 32 And key <= 125                name + Chr(key)            EndIf            key = GetKeyPressed()   ; Check next character in the queue        Wend        If ( IsKeyPressed(#KEY_BACKSPACE) Or IsKeyDown(#KEY_BACKSPACE) ) And backspaceDelay = 0            If name                name = Left(name,Len(name)-1)            EndIf            backspaceDelay = #REPEAT_DELAY        ElseIf IsKeyDown(#KEY_BACKSPACE)            If backspaceDelay > 0                backspaceDelay - 1            EndIf        Else            backspaceDelay = 0        EndIf    Else        framesCounter = 0    EndIf    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    BeginDrawing()            ClearBackground(#COLOR_RAYWHITE)        DrawTextRaylib("PLACE MOUSE OVER INPUT BOX!", 240, 140, 20, #COLOR_GRAY)        DrawRectangleRec(@textBox, #COLOR_LIGHTGRAY)        If mouseOnText            DrawRectangleLines(textBox\x, textBox\y, textBox\width, textBox\height, #COLOR_RED)        Else            DrawRectangleLines(textBox\x, textBox\y, textBox\width, textBox\height, #COLOR_DARKGRAY)        EndIf                If mouseOnText And ((framesCounter/20)%2) = 0            ; Draw blinking underscore char            actualCursor = #CURSOR        Else            actualCursor = ""        EndIf                ; Limit drawing area to the input box        BeginScissorMode(textBox\x, textBox\y, textBox\width, textBox\height)            Define len = MeasureText(name+#CURSOR, 40) + 5            If len >= textBox\width     ; draw at -minus position                DrawTextRaylib(name+actualCursor, textBox\x + textBox\width - 5 - len, textBox\y + 8, 40, #COLOR_MAROON)            Else                        ; draw at normal position                DrawTextRaylib(name+actualCursor, textBox\x + 5, textBox\y + 8, 40, #COLOR_MAROON)            EndIf        EndScissorMode()        DrawTextRaylib("INPUT CHARS: "+Len(name), 315, 250, 20, #COLOR_DARKGRAY)    EndDrawing()    ;>---------------------------------------------------------------------------------        If IsKeyPressed(#KEY_F1)        TakeScreenshot("screenshots/text_input_box.png")    EndIf    Wend; De-Initialization;>-------------------------------------------------------------------------------------CloseWindowRaylib()                     ; Close window and OpenGL context;>-------------------------------------------------------------------------------------