;*******************************************************************************************;*;*   raylib [shapes] example - rectangle scaling by mouse;*;*   This example has been created using raylib 2.5 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Example contributed by Vlad Adrian (@demizdor) and reviewed by Ramon Santamaria (@raysan5);*;*   Copyright (c) 2018 Vlad Adrian (@demizdor) and Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                  ; First we need to includeXIncludeFile "raylib.pbi"               ; the raylib-purebasic importEnableExplicit                          ; All variables have to be defined before useUseModule ray                           ; Import the module#MOUSE_SCALE_MARK_SIZE = 12; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [shapes] example - rectangle scaling mouse" )If Not IsWindowReady()                  ; After creating the window, we check    End                                 ; for errors at initialization.EndIf                                   ; In case of error at init we end the program.Define.Rectangle rec, rec2InitRectangle(@rec, 100, 100, 200, 80)Define.Vector2 mousePosition, v1, v2, v3Define mouseScaleReady = #FalseDefine mouseScaleMode = #FalseSetTargetFPS(60)                        ; Set our game to run at 60 frames-per-second;>-------------------------------------------------------------------------------------; Main game loopWhile Not WindowShouldClose()           ; Detect window close button or ESC key    ; Update    ;>---------------------------------------------------------------------------------        GetMousePosition(@mousePosition)        InitRectangle(@rec2, rec\x + rec\width - #MOUSE_SCALE_MARK_SIZE,                             rec\y + rec\height - #MOUSE_SCALE_MARK_SIZE,                             #MOUSE_SCALE_MARK_SIZE, #MOUSE_SCALE_MARK_SIZE)        If CheckCollisionPointRec(@mousePosition, @rec) And           CheckCollisionPointRec(@mousePosition, @rec2)            mouseScaleReady = #True            If IsMouseButtonPressed(#MOUSE_LEFT_BUTTON)                mouseScaleMode = #True            EndIf        Else            mouseScaleReady = #False        EndIf        If mouseScaleMode            mouseScaleReady = #True            rec\width  = mousePosition\x - rec\x            rec\height = mousePosition\y - rec\y            If rec\width < #MOUSE_SCALE_MARK_SIZE                rec\width = #MOUSE_SCALE_MARK_SIZE            EndIf            If rec\height < #MOUSE_SCALE_MARK_SIZE                rec\height = #MOUSE_SCALE_MARK_SIZE            EndIf            If IsMouseButtonReleased(#MOUSE_LEFT_BUTTON)                mouseScaleMode = #False            EndIf        EndIf    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    BeginDrawing()            ClearBackground(#COLOR_RAYWHITE)        DrawTextRaylib("Scale rectangle dragging from bottom-right corner!", 10, 10, 20, #COLOR_GRAY)        DrawRectangleRec(@rec, Fade(#COLOR_GREEN, 0.5))        If mouseScaleReady            DrawRectangleLinesEx(@rec, 1, #COLOR_RED)            InitVector2(@v1, rec\x + rec\width - #MOUSE_SCALE_MARK_SIZE, rec\y + rec\height)            InitVector2(@v2, rec\x + rec\width, rec\y + rec\height)            InitVector2(@v3, rec\x + rec\width, rec\y + rec\height - #MOUSE_SCALE_MARK_SIZE)            DrawTriangle(@v1, @v2, @v3, #COLOR_RED)        EndIf    EndDrawing()    ;>---------------------------------------------------------------------------------        If IsKeyPressed(#KEY_F1)        TakeScreenshot("screenshots/shapes_rectangle_scaling.png")    EndIf    Wend; De-Initialization;>-------------------------------------------------------------------------------------CloseWindowRaylib()                     ; Close window and OpenGL context;>-------------------------------------------------------------------------------------