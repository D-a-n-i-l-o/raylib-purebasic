;*******************************************************************************************;*;*   raylib [textures] example - Image processing;*;*   NOTE: Images are loaded in CPU memory (RAM); textures are loaded in GPU memory (VRAM);*;*   This example has been created using raylib 1.4 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Copyright (c) 2016 Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                  ; First we need to includeXIncludeFile "raylib.pbi"               ; the raylib-purebasic importImportC ""                              ; Required for: free()    free(*data)EndImportEnableExplicit                          ; All variables have to be defined before useUseModule ray                           ; Import the module#NUM_PROCESSES = 8Enumeration ImageProcess    #NONE = 0    #COLOR_GRAYSCALE    #COLOR_TINT    #COLOR_INVERT    #COLOR_CONTRAST    #COLOR_BRIGHTNESS    #FLIP_VERTICAL    #FLIP_HORIZONTALEndEnumerationDim processText.s(#NUM_PROCESSES)processText(0) = "NO PROCESSING"processText(1) = "COLOR GRAYSCALE"processText(2) = "COLOR TINT"processText(3) = "COLOR INVERT"processText(4) = "COLOR CONTRAST"processText(5) = "COLOR BRIGHTNESS"processText(6) = "FLIP VERTICAL"processText(7) = "FLIP HORIZONTAL"; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [textures] example - image processing" )If Not IsWindowReady()                  ; After creating the window, we check    End                                 ; for errors at initialization.EndIf                                   ; In case of error at init we end the program.; NOTE: Textures MUST be loaded after Window initialization (OpenGL context is required)Define image.ImageLoadImageRaylib(@image, "resources/parrots.png")    ; Loaded in CPU memory (RAM)ImageFormatRaylib(@image, #UNCOMPRESSED_R8G8B8A8)   ; Format image to RGBA 32bit (required for texture update) <-- ISSUEDefine texture.Texture2DLoadTextureFromImage(@texture, @image)  ; Image converted to texture, GPU memory (VRAM)Define currentProcess = #NONEDefine textureReload = #FalseDefine iDim selectRecs.Rectangle(#NUM_PROCESSES)For i = 0 To #NUM_PROCESSES - 1    InitRectangle(@selectRecs(i), 40.0, 50 + 32*i, 150.0, 30.0)NextSetTargetFPS(60)                        ; Set our game to run at 60 frames-per-second;>-------------------------------------------------------------------------------------; Main game loopRepeat    ; Update    ;>---------------------------------------------------------------------------------    If IsKeyPressed(#KEY_DOWN)        currentProcess + 1        If currentProcess > #NUM_PROCESSES-1            currentProcess = 0        EndIf        textureReload = #True    ElseIf IsKeyPressed(#KEY_UP)        currentProcess - 1        If currentProcess < 0            currentProcess = #NUM_PROCESSES-1        EndIf        textureReload = #True    EndIf    If textureReload        UnloadImage(@image)                             ; Unload current image data        LoadImageRaylib(@image, "resources/parrots.png"); Re-load image data        ; NOTE: Image processing is a costly CPU process to be done every frame,        ; If image processing is required in a frame-basis, it should be done        ; with a texture and by shaders        Select currentProcess            Case #COLOR_GRAYSCALE:  ImageColorGrayscale(@image)            Case #COLOR_TINT:       ImageColorTint(@image, #COLOR_GREEN)            Case #COLOR_INVERT:     ImageColorInvert(@image)            Case #COLOR_CONTRAST:   ImageColorContrast(@image, -40)            Case #COLOR_BRIGHTNESS: ImageColorBrightness(@image, -80)            Case #FLIP_VERTICAL:    ImageFlipVertical(@image)            Case #FLIP_HORIZONTAL:  ImageFlipHorizontal(@image)        EndSelect        Define *pixels = GetImageData(@image)  ; Get pixel data from image (RGBA 32bit)        UpdateTexture(@texture, *pixels); Update texture with new image data        free(*pixels)                   ; Unload pixels data from RAM        textureReload = #False    EndIf    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    BeginDrawing()            ClearBackground(#COLOR_RAYWHITE)        DrawTextRaylib("IMAGE PROCESSING:", 40, 30, 10, #COLOR_DARKGRAY)        DrawTextRaylib("Use Cursor Keys Up / Down", 40, selectRecs(#NUM_PROCESSES-1)\y + selectRecs(#NUM_PROCESSES-1)\height + 10, 10, #COLOR_DARKGRAY)        Define col1, col2, col3        ; Draw rectangles        For i = 0 To #NUM_PROCESSES-1            If i = currentProcess : col1 = #COLOR_SKYBLUE   : col2 = #COLOR_BLUE : col3 = #COLOR_DARKBLUE            Else                  : col1 = #COLOR_LIGHTGRAY : col2 = #COLOR_GRAY : col3 = #COLOR_DARKGRAY            EndIf            DrawRectangleRec(@selectRecs(i), col1)            DrawRectangleLines(selectRecs(i)\x, selectRecs(i)\y,                               selectRecs(i)\width, selectRecs(i)\height,                               col2)            DrawTextRaylib( processText(i),                            selectRecs(i)\x + selectRecs(i)\width / 2 - MeasureText(processText(i), 10) / 2,                            selectRecs(i)\y + 11, 10, col3)        Next        DrawTexture(@texture, #SCREEN_WIDTH - texture\width - 60, #SCREEN_HEIGHT/2 - texture\height/2, #COLOR_WHITE)        DrawRectangleLines(#SCREEN_WIDTH - texture\width - 60, #SCREEN_HEIGHT/2 - texture\height/2, texture\width, texture\height, #COLOR_BLACK)    EndDrawing()    ;>---------------------------------------------------------------------------------        If IsKeyPressed(#KEY_F1)        TakeScreenshot("screenshots/textures_image_processing.png")    EndIf    Until WindowShouldClose()               ; Detect window close button or ESC key; De-Initialization;>-------------------------------------------------------------------------------------UnloadTexture(@texture)                 ; Unload texture from VRAMUnloadImage(@image)                     ; Unload image from RAMCloseWindowRaylib()                     ; Close window and OpenGL context;>-------------------------------------------------------------------------------------