;*******************************************************************************************;*;*   raylib [core] example - Input multitouch;*;*   This example has been created using raylib 2.1 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Example contributed by Berni (@Berni8k) and reviewed by Ramon Santamaria (@raysan5);*;*   Copyright (c) 2019 Berni (@Berni8k) and Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                      ; First we need to includeXIncludeFile "raylib.pbi"                   ; the raylib-purebasic importEnableExplicit; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450ray::InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [core] example - input multitouch" )If Not ray::IsWindowReady()                 ; After creating the window, we check    End                                     ; for errors at initialization.EndIf                                       ; In case of error at init we end the program.ray::SetTargetFPS(60)                       ; Set our game to run at 60 frames-per-secondDefine ballPosition.ray::Vector2ray::InitVector2(@ballPosition, -100.0, -100.0 )Define ballColor = ray::#COLOR_BEIGEDefine touchCounter = 0Define touchPosition.ray::Vector2ray::InitVector2(@touchPosition);>-------------------------------------------------------------------------------------; Main game loopWhile Not ray::WindowShouldClose()          ; Detect window close button or ESC key    ; Update    ;>---------------------------------------------------------------------------------    ray::GetMousePosition( @ballPosition )    ballColor = ray::#COLOR_BEIGE    If ray::IsMouseButtonDown(ray::#MOUSE_LEFT_BUTTON)      : ballColor    = ray::#COLOR_MAROON   : EndIf    If ray::IsMouseButtonDown(ray::#MOUSE_MIDDLE_BUTTON)    : ballColor    = ray::#COLOR_LIME     : EndIf    If ray::IsMouseButtonDown(ray::#MOUSE_RIGHT_BUTTON)     : ballColor    = ray::#COLOR_DARKBLUE : EndIf    If ray::IsMouseButtonPressed(ray::#MOUSE_LEFT_BUTTON)   : touchCounter = 10 : EndIf    If ray::IsMouseButtonPressed(ray::#MOUSE_MIDDLE_BUTTON) : touchCounter = 10 : EndIf    If ray::IsMouseButtonPressed(ray::#MOUSE_RIGHT_BUTTON)  : touchCounter = 10 : EndIf    If touchCounter > 0        touchCounter - 1    EndIf    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    ray::BeginDrawing()            ray::ClearBackground(ray::#COLOR_RAYWHITE)        ; Multitouch        Define i        For i = 0 To ray::#MAX_TOUCH_POINTS - 1            ray::GetTouchPosition(@touchPosition, i)                ; Get the touch point            If (touchPosition\x >= 0) And (touchPosition\y >= 0)    ; Make sure point is not (-1,-1) as this means there is no touch for it                ; Draw circle and touch index number                ray::DrawCircleV(@touchPosition, 34, ray::#COLOR_ORANGE);                ray::DrawTextRaylib(Str(i), touchPosition\x - 10, touchPosition\y - 70, 40, ray::#COLOR_BLACK)            EndIf        Next        ; Draw the normal mouse location        ray::DrawCircleV(@ballPosition, 30 + (touchCounter*3), ballColor)        ray::DrawTextRaylib("move ball with mouse and click mouse button to change color", 10,  30, 20, ray::#COLOR_DARKGRAY)        ray::DrawTextRaylib("touch the screen at multiple locations to get multiple balls", 10, 50, 20, ray::#COLOR_DARKGRAY)        ray::DrawFPS(10,10)    ray::EndDrawing()    ;>---------------------------------------------------------------------------------        ; If we want to have a screenshot    If ray::IsKeyPressed(ray::#KEY_F1)        ray::TakeScreenshot("screenshots/core_input_multitouch.png")    EndIfWend; De-Initialization;>-------------------------------------------------------------------------------------ray::CloseWindowRaylib()                ; Close window and OpenGL context;>-------------------------------------------------------------------------------------