;*******************************************************************************************;*;*   raylib [shapes] example - raylib logo animation;*;*   This example has been created using raylib 2.3 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Copyright (c) 2014 Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                  ; First we need to includeXIncludeFile "raylib.pbi"               ; the raylib-purebasic importEnableExplicit                          ; All variables have to be defined before useUseModule ray                           ; Import the module; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [shapes] example - raylib logo animation" )If Not IsWindowReady()                  ; After creating the window, we check    End                                 ; for errors at initialization.EndIf                                   ; In case of error at init we end the program.Define logoPositionX = #SCREEN_WIDTH/2 - 128Define logoPositionY = #SCREEN_HEIGHT/2 - 128Define framesCounter, lettersCountDefine topSideRecWidth = 16, leftSideRecHeight = 16Define bottomSideRecWidth = 16, rightSideRecHeight = 16Define state                            ; Tracking animation states (State Machine)Define alpha.f = 1.0                    ; Useful for fadingSetTargetFPS(60)                        ; Set our game to run at 60 frames-per-second;>-------------------------------------------------------------------------------------; Main game loopWhile Not WindowShouldClose()           ; Detect window close button or ESC key    ; Update    ;>---------------------------------------------------------------------------------    Select state        case 0  ; State 0: Small box blinking            framesCounter + 1            if framesCounter = 120                state = 1                framesCounter = 0   ; Reset counter... will be used later...            endif        case 1  ; State 1: Top and left bars growing            topSideRecWidth + 4            leftSideRecHeight + 4            if topSideRecWidth = 256 : state = 2 : endif        case 2  ; State 2: Bottom and right bars growing            bottomSideRecWidth + 4            rightSideRecHeight + 4            if bottomSideRecWidth = 256 : state = 3 : endif        case 3  ; State 3: Letters appearing (one by one)            framesCounter + 1            if framesCounter/12     ; Every 12 frames, one more letter!                lettersCount + 1                framesCounter = 0            endif            if lettersCount >= 10   ; When all letters have appeared, just fade out everything                alpha - 0.02                if alpha <= 0.0                    alpha = 0.0                    state = 4                endif            endif        case 4  ; State 4: Reset and Replay            if IsKeyPressed(#KEY_R)                framesCounter      = 0                lettersCount       = 0                topSideRecWidth    = 16                leftSideRecHeight  = 16                bottomSideRecWidth = 16                rightSideRecHeight = 16                alpha              = 1.0                state              = 0      ; Return to State 0            endif    Endselect    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    BeginDrawing()            ClearBackground(#COLOR_RAYWHITE)        if state = 0            if (framesCounter/15)%2                DrawRectangle(logoPositionX, logoPositionY, 16, 16, #COLOR_BLACK)            endif        elseif state = 1            DrawRectangle(logoPositionX, logoPositionY, topSideRecWidth, 16, #COLOR_BLACK)            DrawRectangle(logoPositionX, logoPositionY, 16, leftSideRecHeight, #COLOR_BLACK)        elseif state = 2            DrawRectangle(logoPositionX, logoPositionY, topSideRecWidth, 16, #COLOR_BLACK)            DrawRectangle(logoPositionX, logoPositionY, 16, leftSideRecHeight, #COLOR_BLACK)            DrawRectangle(logoPositionX + 240, logoPositionY, 16, rightSideRecHeight, #COLOR_BLACK)            DrawRectangle(logoPositionX, logoPositionY + 240, bottomSideRecWidth, 16, #COLOR_BLACK)        elseif state = 3            DrawRectangle(logoPositionX, logoPositionY, topSideRecWidth, 16, Fade(#COLOR_BLACK, alpha))            DrawRectangle(logoPositionX, logoPositionY + 16, 16, leftSideRecHeight - 32, Fade(#COLOR_BLACK, alpha))            DrawRectangle(logoPositionX + 240, logoPositionY + 16, 16, rightSideRecHeight - 32, Fade(#COLOR_BLACK, alpha))            DrawRectangle(logoPositionX, logoPositionY + 240, bottomSideRecWidth, 16, Fade(#COLOR_BLACK, alpha))            DrawRectangle(#SCREEN_WIDTH/2 - 112, #SCREEN_HEIGHT/2 - 112, 224, 224, Fade(#COLOR_RAYWHITE, alpha))            DrawTextRaylib(Mid("raylib", 0, lettersCount), #SCREEN_WIDTH/2 - 44, #SCREEN_HEIGHT/2 + 48, 50, Fade(#COLOR_BLACK, alpha))        elseif state = 4            DrawTextRaylib("[R] REPLAY", 340, 200, 20, #COLOR_GRAY)        endif    EndDrawing()    ;>---------------------------------------------------------------------------------        If IsKeyPressed(#KEY_F1)        TakeScreenshot("screenshots/shapes_logo_raylib_anim.png")    EndIf    Wend; De-Initialization;>-------------------------------------------------------------------------------------CloseWindowRaylib()                     ; Close window and OpenGL context;>-------------------------------------------------------------------------------------