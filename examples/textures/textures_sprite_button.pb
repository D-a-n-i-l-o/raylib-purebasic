;*******************************************************************************************;*;*   raylib [textures] example - sprite button;*;*   This example has been created using raylib 2.5 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Copyright (c) 2019 Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                  ; First we need to includeXIncludeFile "raylib.pbi"               ; the raylib-purebasic importEnableExplicit                          ; All variables have to be defined before useUseModule ray                           ; Import the module#NUM_FRAMES = 3   ; Number of frames (rectangles) for the button sprite texture; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [textures] example - sprite button" )If Not IsWindowReady()                  ; After creating the window, we check    End                                 ; for errors at initialization.EndIf                                   ; In case of error at init we end the program.InitAudioDevice()                       ; Initialize audio deviceDefine fxButton.SoundLoadSoundRaylib(@fxButton, "resources/buttonfx.wav"); Load button soundDefine button.Texture2DLoadTextureRaylib(@button, "resources/button.png")  ; Load button texture; Define frame rectangle for drawingDefine frameHeight = button\height / #NUM_FRAMESDefine sourceRec.RectangleInitRectangle(@sourceRec, 0, 0, button\width, frameHeight); Define button bounds on screenDefine btnBounds.RectangleInitRectangle(@btnBounds, #SCREEN_WIDTH  / 2 - button\width  / 2,                          #SCREEN_HEIGHT / 2 - button\height / #NUM_FRAMES / 2,                          button\width, frameHeight)Define btnState = 0                     ; Button state: 0-NORMAL, 1-MOUSE_HOVER, 2-PRESSEDDefine btnAction = #False               ; Button action should be activatedDefine.Vector2 mousePoint, vecSetTargetFPS(60)                        ; Set our game to run at 60 frames-per-second;>-------------------------------------------------------------------------------------; Main game loopRepeat    ; Update    ;>---------------------------------------------------------------------------------    GetMousePosition(@mousePoint)    btnAction = #False    ; Check button state    If CheckCollisionPointRec(@mousePoint, @btnBounds)        If IsMouseButtonDown(#MOUSE_LEFT_BUTTON)            btnState = 2        Else            btnState = 1        EndIf        If IsMouseButtonReleased(#MOUSE_LEFT_BUTTON)            btnAction = #True        EndIf    Else        btnState = 0    EndIf    If btnAction        PlaySoundRaylib(@fxButton)        ; TODO: Any desired action    EndIf    ; Calculate button frame rectangle to draw depending on button state    sourceRec\y = btnState * frameHeight    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    BeginDrawing()            ClearBackground(#COLOR_RAYWHITE)        InitVector2(@vec, btnBounds\x, btnBounds\y)        DrawTextureRec(@button, @sourceRec, @vec, #COLOR_WHITE) ; Draw button frame    EndDrawing()    ;>---------------------------------------------------------------------------------        If IsKeyPressed(#KEY_F1)        TakeScreenshot("screenshots/textures_sprite_button.png")    EndIf    Until WindowShouldClose()               ; Detect window close button or ESC key; De-Initialization;>-------------------------------------------------------------------------------------UnloadTexture(@button)                  ; Unload button textureUnloadSound(@fxButton)                  ; Unload soundCloseAudioDevice()                      ; Close audio deviceCloseWindowRaylib()                     ; Close window and OpenGL context;>-------------------------------------------------------------------------------------