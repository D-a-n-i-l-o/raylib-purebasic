;*******************************************************************************************;*;*   raylib [text] example - TTF loading and usage;*;*   This example has been created using raylib 1.3.0 (www.raylib.com);*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details);*;*   Copyright (c) 2015 Ramon Santamaria (@raysan5);*;*   Translated to PureBasic by Danilo Krahn, May 2020;*;********************************************************************************************IncludePath "./../../"                  ; First we need to includeXIncludeFile "raylib.pbi"               ; the raylib-purebasic importEnableExplicit                          ; All variables have to be defined before useUseModule ray                           ; Import the module; Desktop platforms#GLSL_VERSION = "330"; PLATFORM_RPI, PLATFORM_ANDROID, PLATFORM_WEB;#GLSL_VERSION = "100"; Initialization;>-------------------------------------------------------------------------------------#SCREEN_WIDTH = 800#SCREEN_HEIGHT = 450InitWindow( #SCREEN_WIDTH, #SCREEN_HEIGHT, "raylib [text] example - SDF fonts" )If Not IsWindowReady()                  ; After creating the window, we check    End                                 ; for errors at initialization.EndIf                                   ; In case of error at init we end the program.; NOTE: Textures/Fonts MUST be loaded after Window initialization (OpenGL context is required)#msg = "Signed Distance Fields"; Default font generation from TTF fontDefine fontDefault.FontfontDefault\baseSize = 16fontDefault\charsCount = 95; Parameters > font size: 16, no chars array provided (0), chars count: 95 (autogenerate chars array)fontDefault\chars = LoadFontData("resources/AnonymousPro-Bold.ttf", 16, 0, 95, #FONT_DEFAULT); Parameters > chars count: 95, font size: 16, chars padding in image: 4 px, pack method: 0 (default)Define atlas.ImageGenImageFontAtlas(@atlas, fontDefault\chars, @fontDefault\recs, 95, 16, 4, 0)LoadTextureFromImage(@fontDefault\texture, @atlas)UnloadImage(@atlas); SDF font generation from TTF fontDefine fontSDF.FontfontSDF\baseSize = 16fontSDF\charsCount = 95; Parameters > font size: 16, no chars array provided (0), chars count: 0 (defaults to 95)fontSDF\chars = LoadFontData("resources/AnonymousPro-Bold.ttf", 16, 0, 0, #FONT_SDF); Parameters > chars count: 95, font size: 16, chars padding in image: 0 px, pack method: 1 (Skyline algorythm)GenImageFontAtlas(@atlas, fontSDF\chars, @fontSDF\recs, 95, 16, 0, 1)LoadTextureFromImage(@fontSDF\texture, @atlas)UnloadImage(@atlas); Load SDF required shader (we use default vertex shader)Define shader.ShaderLoadShader(@shader, "", "resources/shaders/glsl"+#GLSL_VERSION+"/sdf.fs")SetTextureFilter(fontSDF\texture, #FILTER_BILINEAR) ; Required for SDF fontDefine.Vector2 fontPosition, textSizeInitVector2(@fontPosition, 40, #SCREEN_HEIGHT/2 - 50)Define fontSize.f = 16.0Define currentFont                      ; 0 - fontDefault, 1 - fontSDFSetTargetFPS(60)                        ; Set our game to run at 60 frames-per-second;>-------------------------------------------------------------------------------------; Main game loopWhile Not WindowShouldClose()           ; Detect window close button or ESC key    ; Update    ;>---------------------------------------------------------------------------------    fontSize + GetMouseWheelMove()*8.0    If fontSize < 6 : fontSize = 6 : EndIf    If IsKeyDown(#KEY_SPACE) : currentFont = 1    Else                     : currentFont = 0    EndIf    If currentFont = 0 : MeasureTextEx(@textSize, @fontDefault, #msg, fontSize, 0)    Else               : MeasureTextEx(@textSize, @fontSDF,     #msg, fontSize, 0)    EndIf    fontPosition\x = GetScreenWidth()  / 2 - textSize\x / 2    fontPosition\y = GetScreenHeight() / 2 - textSize\y / 2 + 80    ;>---------------------------------------------------------------------------------    ; Draw    ;>---------------------------------------------------------------------------------    BeginDrawing()            ClearBackground(#COLOR_RAYWHITE)        If currentFont = 1            ; NOTE: SDF fonts require a custom SDf shader To compute fragment color            BeginShaderMode(@shader)    ; Activate SDF font shader                DrawTextEx(@fontSDF, #msg, @fontPosition, fontSize, 0, #COLOR_BLACK)            EndShaderMode()             ; Activate our default shader for next drawings            DrawTexture(@fontSDF\texture, 10, 10, #COLOR_BLACK)        Else            DrawTextEx(@fontDefault, #msg, @fontPosition, fontSize, 0, #COLOR_BLACK)            DrawTexture(@fontDefault\texture, 10, 10, #COLOR_BLACK)        EndIf        If currentFont = 1 : DrawTextRaylib("SDF!", 320, 20, 80, #COLOR_RED)        Else               : DrawTextRaylib("default font", 315, 40, 30, #COLOR_GRAY)        EndIf        DrawTextRaylib("FONT SIZE: 16.0", GetScreenWidth() - 240, 20, 20, #COLOR_DARKGRAY)        DrawTextRaylib("RENDER SIZE: "+StrF(fontSize,2), GetScreenWidth() - 240, 50, 20, #COLOR_DARKGRAY)        DrawTextRaylib("Use MOUSE WHEEL to SCALE TEXT!", GetScreenWidth() - 240, 90, 10, #COLOR_DARKGRAY)        DrawTextRaylib("HOLD SPACE to USE SDF FONT VERSION!", 340, GetScreenHeight() - 30, 20, #COLOR_MAROON)    EndDrawing()    ;>---------------------------------------------------------------------------------        If IsKeyPressed(#KEY_F1)        TakeScreenshot("screenshots/text_font_sdf.png")    EndIf    Wend; De-Initialization;>-------------------------------------------------------------------------------------UnloadFont(@fontDefault)    ; Default font unloadingUnloadFont(@fontSDF)        ; SDF font unloadingUnloadShader(@shader)       ; Unload SDF shaderCloseWindowRaylib()         ; Close window and OpenGL context;>-------------------------------------------------------------------------------------